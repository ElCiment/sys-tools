"""
Fen√™tre principale de l'application
Interface utilisateur principale avec menu lat√©ral et console int√©gr√©e
"""
import os
import sys
import time
import threading
import tkinter as tk
from tkinter import messagebox
import customtkinter as ctk
from PIL import Image, ImageTk
import webbrowser
import subprocess
import re
import psutil

from utils.system_utils import get_base_path, is_admin, relaunch_as_admin
from services.printer_service import build_message, send_tcp, send_serial, get_serial_ports
from services.windows_service import (
    tweak_taskbar, restore_context_menu, uninstall_kb5064081,
    disable_windows_notifications, apply_wallpaper, rename_computer,
    add_windows_user, create_veloce_shortcuts, restore_context_menu_win11)
from services.network_service import check_tcp_port, get_wifi_passwords, get_teamviewer_id, get_anydesk_id, show_wifi_passwords
from utils.update_manager import (check_for_updates, download_update, 
                                   install_update, get_remote_version,
                                   LOCAL_VERSION)


class ToolsApp(ctk.CTk):
    """Fen√™tre principale de l'application Outils - Syst√®me"""

    def __init__(self):
        super().__init__()

        self.title("Outils - Syst√®me")
        base_path = get_base_path()

        # Ic√¥ne de l'application
        icon_path = os.path.join(base_path, "mainicon.ico")
        if os.path.exists(icon_path):
            try:
                self.iconbitmap(icon_path)
            except Exception as e:
                print(f"Impossible de charger l'ic√¥ne: {e}")

        # Configuration de la grille
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(1, weight=1)

        # Initialisation des variables
        self._init_variables()

        # Cr√©ation de l'interface
        self._create_menu_bar()
        self._create_header()
        self._create_left_menu()
        self._create_main_area()

        # Log initial
        self.log(
            f"Application d√©marr√©e. Admin: {'Oui' if is_admin() else 'Non'}")

        # Maximiser la fen√™tre apr√®s la cr√©ation compl√®te de l'interface
        self.after(100, lambda: self.state("zoomed"))

        # R√©cup√©ration des IDs en arri√®re-plan
        threading.Thread(target=self._update_remote_ids, daemon=True).start()

    def _init_variables(self):
        """Initialise les variables de l'application"""
        self.print_text_var = ctk.StringVar(
            value="------ Test d'impression ------")
        self.mode_var = tk.StringVar(value="tcp")
        self.com_var = tk.StringVar(value="")
        self.repeat_var = tk.StringVar(value="1")
        self.lines_var = tk.StringVar(value="20")
        self.ip_var = tk.StringVar(value="192.168.192.168")
        self.port_var = tk.StringVar(value="9100")
        self.baud_var = tk.StringVar(value="115200")
        self.shortcut_folder_var = tk.StringVar(value=r"C:\veloce")
        self.check_host_var = tk.StringVar(value="127.0.0.1")
        self.check_port_var = tk.StringVar(value="40000")
        self.wallpaper_var = tk.StringVar(value="wallpaper-kpi.jpg")
        self.pc_name_var = tk.StringVar(
            value=os.environ.get("COMPUTERNAME", ""))

    def _create_menu_bar(self):
        """Cr√©e la barre de menu"""
        menubar = tk.Menu(self, tearoff=0, font=("Segoe UI", 12))

        # Menu Fichier
        fichier_menu = tk.Menu(menubar, tearoff=0, font=("Segoe UI", 12))
        fichier_menu.add_separator()
        fichier_menu.add_command(label="‚ùå Quitter", command=self.quit)
        menubar.add_cascade(label="Fichier", menu=fichier_menu)

        # Menu Outils
        outils_menu = tk.Menu(menubar, tearoff=0, font=("Segoe UI", 12))
        outils_menu.add_command(label="‚öôÔ∏è Panneau de configuration",
                                command=lambda: os.system("control"))
        outils_menu.add_command(label="üñ•Ô∏è G√©rer l'ordinateur",
                                command=lambda: os.system("compmgmt.msc"))
        outils_menu.add_command(label="üìä Gestionnaire des t√¢ches",
                                command=lambda: os.system("taskmgr"))
        outils_menu.add_separator()
        outils_menu.add_command(label="üß© Programmes et fonctionnalit√©s",
                                command=lambda: os.system("appwiz.cpl"))
        outils_menu.add_command(
            label="üîÑ Windows Update",
            command=lambda: os.system("control /name Microsoft.WindowsUpdate"))
        outils_menu.add_command(label="üåê Connexions r√©seau",
                                command=lambda: os.system("ncpa.cpl"))
        menubar.add_cascade(label="Outils", menu=outils_menu)

        # Menu Syst√®me
        system_menu = tk.Menu(menubar, tearoff=0, font=("Segoe UI", 12))
        system_menu.add_command(label="üìÅ Explorateur",
                                command=lambda: os.system("explorer"))
        system_menu.add_command(label="üßæ Informations syst√®me",
                                command=lambda: os.system("msinfo32"))
        system_menu.add_command(label="‚ö° PowerShell",
                                command=lambda: os.system("powershell"))
        system_menu.add_separator()
        system_menu.add_command(label="üß† Registre Windows",
                                command=lambda: os.system("regedit"))
        system_menu.add_command(label="üß∞ Services Windows",
                                command=lambda: os.system("services.msc"))
        system_menu.add_command(label="üöÄ Configuration du syst√®me",
                                command=lambda: os.system("msconfig"))
        system_menu.add_separator()
        system_menu.add_command(
            label="üóÇÔ∏è Dossier D√©marrage",
            command=lambda: os.system("explorer shell:startup"))
        menubar.add_cascade(label="Syst√®me", menu=system_menu)

        # Menu Aide
        aide_menu = tk.Menu(menubar, tearoff=0, font=("Segoe UI", 12))
        aide_menu.add_command(label="üìÑ Release Notes",
                              command=self.show_release_notes)
        aide_menu.add_command(
            label="üåê T√©l√©chargements",
            command=lambda: webbrowser.open(
                "https://kpi-tech.ca/launcher/telechargements.html"))
        menubar.add_cascade(label="Aide", menu=aide_menu)

        self.config(menu=menubar)

    def _get_veloce_password(self):
        """Calcule le mot de passe Veloce du jour"""
        from datetime import datetime
        now = datetime.now()

        # Mapping des chiffres aux lettres
        digit_to_letter = {
            '0': 'A',
            '1': 'B',
            '2': 'C',
            '3': 'D',
            '4': 'E',
            '5': 'F',
            '6': 'G',
            '7': 'H',
            '8': 'I',
            '9': 'J'
        }

        # R√©cup√©rer le dernier chiffre de chaque composant
        day_last = str(now.day)[-1]
        month_last = str(now.month)[-1]
        year_last = str(now.year)[-1]

        # Construire le mot de passe: (Jour)V(Mois)E(Ann√©e)L
        password = (digit_to_letter[day_last] + 'V' +
                    digit_to_letter[month_last] + 'E' +
                    digit_to_letter[year_last] + 'L')

        return password

    def _create_header(self):
        """Cr√©e l'en-t√™te de l'application"""
        header = ctk.CTkFrame(self, fg_color="transparent")
        header.grid(row=0,
                    column=0,
                    columnspan=4,
                    sticky="nsew",
                    padx=12,
                    pady=(12, 4))
        header.grid_columnconfigure(1, weight=1)

        # Logo
        base_path = get_base_path()
        logo_path = os.path.join(base_path, "assets", "images", "mainlogo.png")
        if os.path.exists(logo_path):
            try:
                logo_image = Image.open(logo_path).resize(
                    (100, 100), Image.Resampling.LANCZOS)
                self.logo_photo = ImageTk.PhotoImage(logo_image)
                logo_label = ctk.CTkLabel(header,
                                          image=self.logo_photo,
                                          text="")
                logo_label.grid(row=0,
                                column=0,
                                rowspan=3,
                                sticky="w",
                                padx=(0, 10))
            except Exception as e:
                print(f"Impossible de charger le logo: {e}")

        # Titre
        title = ctk.CTkLabel(header,
                             text="Outils - Syst√®me",
                             font=ctk.CTkFont(size=20, weight="bold"))
        title.grid(row=0, column=1, sticky="w", pady=(4, 0))

        # Frame pour version + bouton mise √† jour (c√¥te √† c√¥te)
        version_frame = ctk.CTkFrame(header, fg_color="transparent")
        version_frame.grid(row=1, column=1, sticky="w")

        # Version (charg√©e depuis le serveur)
        self.version_label = ctk.CTkLabel(version_frame,
                               text=f"Version {LOCAL_VERSION}",
                               font=ctk.CTkFont(size=12))
        self.version_label.pack(side="left", padx=(0, 10))

        # Bouton v√©rifier mises √† jour (√† c√¥t√© de la version)
        update_btn = ctk.CTkButton(version_frame,
                                   text="üîÑ Mise √† jour",
                                   width=110,
                                   height=24,
                                   command=self._check_updates_manual,
                                   fg_color="#0284c7",
                                   hover_color="#0369a1",
                                   font=ctk.CTkFont(size=10))
        update_btn.pack(side="left")

        # Lancer la v√©rification automatique au d√©marrage
        threading.Thread(target=self._check_updates_auto, daemon=True).start()

        # Mot de passe Veloce du jour
        veloce_pwd = self._get_veloce_password()
        pwd_label = ctk.CTkLabel(
            header,
            text=f"üîë Password Veloce du jour: {veloce_pwd}",
            font=ctk.CTkFont(size=11, weight="bold"),
            text_color="#4ade80")
        pwd_label.grid(row=2, column=1, sticky="w", pady=(2, 0))

        # TeamViewer et AnyDesk IDs (affich√©s en permanence)
        self.tv_label = ctk.CTkLabel(header,
                                     text="TeamViewer ID: Chargement...",
                                     font=ctk.CTkFont(size=11),
                                     text_color="gray")
        self.tv_label.grid(row=0, column=2, sticky="e", padx=(10, 0))

        self.ad_label = ctk.CTkLabel(header,
                                     text="AnyDesk ID: Chargement...",
                                     font=ctk.CTkFont(size=11),
                                     text_color="gray")
        self.ad_label.grid(row=1, column=2, sticky="e", padx=(10, 0))

        # Bouton Effacer console
        clear_btn = ctk.CTkButton(header,
                                  text="üóëÔ∏è Effacer console",
                                  width=140,
                                  command=self.clear_console,
                                  fg_color="#c03a3a",
                                  hover_color="#e05454")
        clear_btn.grid(row=2, column=2, sticky="e", pady=(5, 0))

    def _create_left_menu(self):
        """Cr√©e le menu lat√©ral gauche"""
        left = ctk.CTkScrollableFrame(self, width=260, corner_radius=8)
        left.grid(row=1, column=0, sticky="nsw", padx=(12, 6), pady=8)

        lbl = ctk.CTkLabel(left,
                           text="Fonctions",
                           font=ctk.CTkFont(size=14, weight="bold"))
        lbl.pack(anchor="nw", padx=12, pady=(12, 6))

        # Menu items avec sections
        menu_items = [
            ("‚öôÔ∏è Setup", None),
            ("Auto Setup", "auto_setup"),
            ("üìä Syst√®me/Windows", None),
            ("Infos Syst√®me", "show_system_info"),
            ("Activer Windows", "activate_windows"),
            ("Renommer le PC", "rename_pc"),
            ("Tweaks Windows", "tweak_windows"),
            ("G√©rer les Utilisateurs", "manage_users"),
            ("Commandes personnalis√©es", "custom_commands"),
            #("üí≥ POS", None),
            #("Cr√©er raccourcis VELBO/VELSRV", "create_shortcuts"),
            ("üåê R√©seau", None),
            ("V√©rifier port TCP 40000", "check_port"),
            ("Voir mots de passe WiFi", "show_wifi_passwords"),
            ("Adresse IP", "ip_config"),
            ("üñ®Ô∏è Imprimantes", None),
            ("Test impression", "print_test"),
        ]

        for txt, key in menu_items:
            if key is None:
                # Titre de section
                lbl = ctk.CTkLabel(left,
                                   text=txt,
                                   font=ctk.CTkFont(size=12, weight="bold"))
                lbl.pack(anchor="nw", padx=12, pady=(12, 4))
                # Ligne de s√©paration
                separator = ctk.CTkFrame(left, height=1, fg_color="#555555")
                separator.pack(fill="x", padx=12, pady=(0, 8))
            else:
                b = ctk.CTkButton(left,
                                  text=txt,
                                  width=220,
                                  height=44,
                                  fg_color="#c03a3a",
                                  hover_color="#e05454",
                                  command=lambda k=key: self.show_function(k))
                b.pack(padx=12, pady=6, anchor="n")

    def _create_main_area(self):
        """Cr√©e la zone principale (console + options) avec panneau resizable"""
        main = ctk.CTkFrame(self)
        main.grid(row=1, column=1, sticky="nsew", padx=(6, 12), pady=8)
        main.grid_rowconfigure(0, weight=1)
        main.grid_columnconfigure(0, weight=1)

        # Utiliser PanedWindow pour rendre le panneau du bas resizable
        paned = tk.PanedWindow(main,
                               orient=tk.VERTICAL,
                               sashwidth=6,
                               bg="#2b2b2b",
                               sashrelief=tk.RAISED)
        paned.grid(row=0, column=0, sticky="nsew")

        # Frame du haut: Console
        top_frame = ctk.CTkFrame(paned)
        paned.add(top_frame, minsize=150)

        # Console title
        cons_title = ctk.CTkLabel(top_frame,
                                  text="Journal / Console",
                                  font=ctk.CTkFont(size=12, weight="bold"))
        cons_title.pack(anchor="w", padx=8, pady=(8, 2))

        # Console textbox
        self.log_box = ctk.CTkTextbox(top_frame,
                                      wrap="word",
                                      font=("Courier New", 12))
        self.log_box.pack(fill="both", expand=True, padx=8, pady=(0, 8))
        self.log_box.configure(state="disabled")

        # Frame du bas: Options dynamiques (resizable)
        bottom_frame = ctk.CTkFrame(paned, corner_radius=8)
        paned.add(bottom_frame, minsize=100)

        self.func_options_holder = ctk.CTkFrame(bottom_frame,
                                                fg_color="transparent")
        self.func_options_holder.pack(fill="both", expand=True, padx=8, pady=8)

    def log(self, message):
        """Ajoute un message au journal de la console"""
        ts = time.strftime("%Y-%m-%d %H:%M:%S")
        msg = f"[{ts}] {message}\n"
        self.log_box.configure(state="normal")
        self.log_box.insert("end", msg)
        self.log_box.see("end")
        self.log_box.configure(state="disabled")

    def clear_console(self):
        """Efface le contenu de la console"""
        self.log_box.configure(state="normal")
        self.log_box.delete("1.0", "end")
        self.log_box.configure(state="disabled")
        self.log("Console effac√©e")

    def show_function(self, func_key):
        """Affiche l'interface d'une fonction"""
        # Nettoyer l'ancien contenu
        for widget in self.func_options_holder.winfo_children():
            widget.destroy()

        # Appeler la fonction correspondante
        if func_key == "print_test":
            self._build_print_options(self.func_options_holder)
        elif func_key == "check_port":
            self._build_checkport_options(self.func_options_holder)
        elif func_key == "show_wifi_passwords":
            self._build_wifi_options(self.func_options_holder)
        elif func_key == "tweak_windows":
            self._build_tweak_options(self.func_options_holder)
        elif func_key == "rename_pc":
            self._build_rename_pc_options(self.func_options_holder)
        elif func_key == "activate_windows":
            self._build_activate_windows_options(self.func_options_holder)
        elif func_key == "show_system_info":
            self._show_system_info()
        elif func_key == "create_shortcuts":
            self._build_shortcuts_options(self.func_options_holder)
        elif func_key == "manage_users":
            self._build_manage_users_options(self.func_options_holder)
        elif func_key == "auto_setup":
            self.build_auto_setup_options(self.func_options_holder)
        elif func_key == "custom_commands":
            self.build_custom_commands_options(self.func_options_holder)
        elif func_key == "ip_config":
            self.build_ip_config_options(self.func_options_holder)
        else:
            self.log(f"Fonction '{func_key}' non impl√©ment√©e")

    def _build_print_options(self, parent):
        """Construit l'interface de test d'impression"""
        f = ctk.CTkFrame(parent)
        f.pack(fill="both", expand=True)

        # Mode de communication
        row_frame = ctk.CTkFrame(f, fg_color="transparent")
        row_frame.pack(anchor="nw", fill="x", pady=(4, 8))
        ctk.CTkLabel(row_frame,
                     text="Mode de communication:").pack(side="left",
                                                         padx=(4, 8))
        mode_combo = ctk.CTkOptionMenu(row_frame,
                                       values=["tcp", "com"],
                                       variable=self.mode_var,
                                       width=120)
        mode_combo.pack(side="left")

        # Conteneur pour TCP/COM
        self.conn_frame = ctk.CTkFrame(f)
        self.conn_frame.pack(fill="x", padx=6, pady=(6, 4))
        self.conn_frame.grid_propagate(False)
        self.conn_frame.configure(height=130)

        # TCP Frame
        self.tcp_frame = ctk.CTkFrame(self.conn_frame)
        self.tcp_frame.grid(row=0, column=0, sticky="nsew")
        ctk.CTkLabel(self.tcp_frame,
                     text="Connexion TCP/IP",
                     font=ctk.CTkFont(weight="bold")).grid(row=0,
                                                           column=0,
                                                           sticky="w",
                                                           padx=6,
                                                           pady=6)
        ctk.CTkLabel(self.tcp_frame, text="Adresse IP:").grid(row=1,
                                                              column=0,
                                                              sticky="w",
                                                              padx=6,
                                                              pady=4)
        ctk.CTkEntry(self.tcp_frame, textvariable=self.ip_var,
                     width=220).grid(row=1,
                                     column=1,
                                     sticky="w",
                                     padx=6,
                                     pady=4)
        ctk.CTkLabel(self.tcp_frame, text="Port:").grid(row=2,
                                                        column=0,
                                                        sticky="w",
                                                        padx=6,
                                                        pady=4)
        ctk.CTkEntry(self.tcp_frame, textvariable=self.port_var,
                     width=120).grid(row=2,
                                     column=1,
                                     sticky="w",
                                     padx=6,
                                     pady=4)

        # COM Frame
        self.com_frame = ctk.CTkFrame(self.conn_frame)
        self.com_frame.grid(row=0, column=0, sticky="nsew")
        ctk.CTkLabel(self.com_frame,
                     text="Connexion S√©rie (COM)",
                     font=ctk.CTkFont(weight="bold")).grid(row=0,
                                                           column=0,
                                                           sticky="w",
                                                           padx=6,
                                                           pady=6)
        ctk.CTkLabel(self.com_frame, text="Port COM:").grid(row=1,
                                                            column=0,
                                                            sticky="w",
                                                            padx=6,
                                                            pady=4)

        ports = get_serial_ports()
        self.com_option = ctk.CTkOptionMenu(
            self.com_frame,
            values=ports if ports else ["Aucun d√©tect√©"],
            variable=self.com_var,
            width=220)
        self.com_option.grid(row=1, column=1, sticky="w", padx=6, pady=4)

        ctk.CTkButton(self.com_frame,
                      text="üîÑ Rafra√Æchir",
                      width=120,
                      command=self._refresh_com_ports).grid(row=1,
                                                            column=2,
                                                            padx=6,
                                                            pady=4)

        ctk.CTkLabel(self.com_frame, text="Baudrate:").grid(row=2,
                                                            column=0,
                                                            sticky="w",
                                                            padx=6,
                                                            pady=4)
        baud_rates = ["9600", "19200", "38400", "57600", "115200"]
        self.baud_menu = ctk.CTkOptionMenu(self.com_frame,
                                           values=baud_rates,
                                           variable=self.baud_var,
                                           width=120)
        self.baud_menu.grid(row=2, column=1, sticky="w", padx=6, pady=4)

        # Options
        opts = ctk.CTkFrame(f, fg_color="transparent")
        opts.pack(fill="x", padx=6, pady=(10, 6))
        ctk.CTkLabel(opts, text="R√©p√©titions:").grid(row=0,
                                                     column=0,
                                                     padx=6,
                                                     pady=6,
                                                     sticky="w")
        ctk.CTkEntry(opts, textvariable=self.repeat_var,
                     width=80).grid(row=0,
                                    column=1,
                                    padx=6,
                                    pady=6,
                                    sticky="w")

        ctk.CTkLabel(opts, text="Lignes par section:").grid(row=1,
                                                            column=0,
                                                            padx=6,
                                                            pady=6,
                                                            sticky="w")
        ctk.CTkEntry(opts, textvariable=self.lines_var,
                     width=80).grid(row=1,
                                    column=1,
                                    padx=6,
                                    pady=6,
                                    sticky="w")

        ctk.CTkButton(opts,
                      text="üöÄ Envoyer le test",
                      width=160,
                      command=self._run_print_test).grid(row=0,
                                                         column=2,
                                                         rowspan=2,
                                                         padx=12,
                                                         pady=6)

        # Texte √† imprimer
        text_frame = ctk.CTkFrame(f, fg_color="transparent")
        text_frame.pack(fill="x", padx=6, pady=(6, 4))
        ctk.CTkLabel(text_frame, text="Texte √† imprimer:").grid(row=0,
                                                                column=0,
                                                                sticky="w",
                                                                padx=6,
                                                                pady=4)
        ctk.CTkEntry(text_frame, textvariable=self.print_text_var,
                     width=400).grid(row=0,
                                     column=1,
                                     sticky="w",
                                     padx=6,
                                     pady=4)

        # Toggle TCP/COM
        def toggle():
            if self.mode_var.get() == "tcp":
                self.com_frame.grid_remove()
                self.tcp_frame.grid()
            else:
                self.tcp_frame.grid_remove()
                self.com_frame.grid()

        self.mode_var.trace_add("write", lambda *_: toggle())
        toggle()

    def _build_checkport_options(self, parent):
        """Construit l'interface de v√©rification de port"""
        f = ctk.CTkFrame(parent)
        f.pack(fill="both", expand=True, padx=6, pady=6)
        ctk.CTkLabel(f,
                     text="V√©rifier si le port TCP 40000 est ouvert",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                           pady=(0, 6))

        row = ctk.CTkFrame(f, fg_color="transparent")
        row.pack(anchor="w", pady=(6, 8))
        ctk.CTkLabel(row, text="H√¥te:").pack(side="left")
        ctk.CTkEntry(row, textvariable=self.check_host_var,
                     width=140).pack(side="left", padx=(4, 12))
        ctk.CTkLabel(row, text="Port:").pack(side="left")
        ctk.CTkEntry(row, textvariable=self.check_port_var,
                     width=80).pack(side="left", padx=(4, 0))

        ctk.CTkButton(f,
                      text="Tester le port",
                      width=200,
                      command=self._run_check_port).pack(pady=6)

    def _build_wifi_options(self, parent):
        """Construit l'interface de r√©cup√©ration des mots de passe WiFi"""
        f = ctk.CTkFrame(parent)
        f.pack(fill="both", expand=True, padx=6, pady=6)
        ctk.CTkLabel(f,
                     text="Voir les mots de passe WiFi sauvegard√©s",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                           pady=(0, 6))
        ctk.CTkLabel(
            f,
            text=
            "R√©cup√®re tous les profils WiFi enregistr√©s et leurs mots de passe.",
            text_color="#a8b3c6").pack(anchor="w", pady=(0, 6))
        ctk.CTkButton(f,
                      text="üîç R√©cup√©rer les mots de passe WiFi",
                      width=280,
                      command=self._run_show_wifi_passwords).pack(pady=6)

    def _build_tweak_options(self, parent):
        """Construit l'interface des tweaks Windows"""
        f = ctk.CTkFrame(parent)
        f.pack(fill="both", expand=True, padx=6, pady=6)
        ctk.CTkLabel(f,
                     text="Tweaks Windows & Options",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                           pady=(0, 6))

        ctk.CTkButton(f,
                      text="Appliquer Tweaks Taskbar",
                      width=220,
                      fg_color="#4c84e0",
                      hover_color="#2e62c9",
                      command=self._run_tweak_taskbar).pack(anchor="w",
                                                            pady=(0, 8))
        ctk.CTkButton(f,
                      text="D√©sactiver notifications Windows",
                      width=260,
                      fg_color="#4c84e0",
                      hover_color="#2e62c9",
                      command=self._run_disable_notifications).pack(anchor="w",
                                                                    pady=(0,
                                                                          8))
        ctk.CTkButton(f,
                      text="R√©tablir Right Click Menu (Win11)",
                      width=260,
                      fg_color="#4c84e0",
                      hover_color="#2e62c9",
                      command=self._run_restore_menu).pack(anchor="w",
                                                           pady=(0, 20))
        ctk.CTkButton(f,
                      text="üß© D√©sinstaller KB5064081",
                      width=240,
                      fg_color="#e05454",
                      hover_color="#c03a3a",
                      command=self._run_uninstall_kb).pack(anchor="w",
                                                           pady=(0, 20))

        # S√©lecteur de wallpaper
        ctk.CTkLabel(f,
                     text="üñºÔ∏è Appliquer un fond d'√©cran:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                           pady=(0, 6))

        # D√©tecter les wallpapers disponibles
        base_path = get_base_path()
        wallpaper_dir = os.path.join(base_path, "assets", "wallpapers")
        wallpapers = []
        if os.path.exists(wallpaper_dir):
            for file in os.listdir(wallpaper_dir):
                if file.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
                    wallpapers.append(file)

        if not wallpapers:
            wallpapers = ["wallpaper-kpi.jpg"]  # D√©faut

        # Variable pour le wallpaper s√©lectionn√©
        if not hasattr(self, 'selected_wallpaper_var'):
            self.selected_wallpaper_var = tk.StringVar(
                value=wallpapers[0] if wallpapers else "")

        # Frame pour le s√©lecteur
        wallpaper_frame = ctk.CTkFrame(f, fg_color="transparent")
        wallpaper_frame.pack(anchor="w", pady=(0, 8))

        ctk.CTkLabel(wallpaper_frame, text="Wallpaper:").pack(side="left",
                                                              padx=(0, 8))
        wallpaper_menu = ctk.CTkOptionMenu(
            wallpaper_frame,
            variable=self.selected_wallpaper_var,
            values=wallpapers,
            width=300)
        wallpaper_menu.pack(side="left", padx=(0, 8))

        ctk.CTkButton(wallpaper_frame,
                      text="Appliquer",
                      width=120,
                      fg_color="#16a34a",
                      hover_color="#15803d",
                      command=self._run_apply_wallpaper).pack(side="left")

    def _build_rename_pc_options(self, parent):
        """Construit l'interface de renommage du PC"""
        f = ctk.CTkFrame(parent)
        f.pack(fill="both", expand=True, padx=6, pady=6)
        ctk.CTkLabel(f,
                     text="Renommer ce PC Windows",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                           pady=(0, 6))

        ctk.CTkLabel(f, text="Nouveau nom du PC:").pack(anchor="w",
                                                        pady=(4, 2))
        ctk.CTkEntry(f, textvariable=self.pc_name_var,
                     width=300).pack(anchor="w", pady=(0, 6))

        ctk.CTkButton(f,
                      text="Renommer le PC",
                      width=220,
                      fg_color="#2b6ee6",
                      hover_color="#2058c9",
                      command=self._run_rename_pc).pack(pady=6)
        ctk.CTkLabel(f,
                     text="‚ö†Ô∏è N√©cessite un red√©marrage",
                     text_color="#fca5a5").pack(anchor="w", pady=(6, 0))

    def _build_activate_windows_options(self, parent):
        """Construit l'interface d'activation Windows"""
        f = ctk.CTkFrame(parent)
        f.pack(fill="both", expand=True, padx=6, pady=6)
        ctk.CTkLabel(f,
                     text="Activer Windows:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                           pady=(0, 6))

        fixed_cmd = 'irm https://get.activated.win| iex'
        ctk.CTkLabel(f,
                     text="Commande (non modifiable):",
                     text_color="#a8b3c6").pack(anchor="w")
        cmd_box = ctk.CTkTextbox(f, width=900, height=60, wrap="word")
        cmd_box.insert("0.0", fixed_cmd)
        cmd_box.configure(state="disabled")
        cmd_box.pack(fill="x", pady=(6, 8))

        ctk.CTkButton(
            f,
            text="‚ñ∂ Activer Windows",
            width=280,
            fg_color="#2b6ee6",
            hover_color="#2058c9",
            command=lambda: self._run_activate_windows(fixed_cmd)).pack(pady=6)
        ctk.CTkLabel(
            f,
            text="‚ö†Ô∏è Cette commande t√©l√©charge et ex√©cute du code distant.",
            text_color="#fca5a5").pack(anchor="w", pady=(8, 0))

    def _build_shortcuts_options(self, parent):
        """Construit l'interface de cr√©ation de raccourcis"""
        f = ctk.CTkFrame(parent)
        f.pack(fill="both", expand=True, padx=6, pady=6)
        ctk.CTkLabel(f,
                     text="Cr√©er sur le Bureau : VELBO.lnk et VELSRV.lnk",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                           pady=(0, 6))
        ctk.CTkLabel(f,
                     text="Dossier contenant velbo.exe et velsrv.exe :").pack(
                         anchor="w")
        folder_entry = ctk.CTkEntry(f,
                                    textvariable=self.shortcut_folder_var,
                                    width=520)
        folder_entry.pack(anchor="w", pady=(6, 8))
        ctk.CTkButton(f,
                      text="Cr√©er les raccourcis",
                      width=220,
                      command=self._run_create_shortcuts).pack(pady=(4, 8))

    def _refresh_com_ports(self):
        """Rafra√Æchit la liste des ports COM"""
        ports = get_serial_ports()
        vals = ports if ports else ["Aucun d√©tect√©"]
        try:
            self.com_option.configure(values=vals)
            if ports:
                self.com_option.set(ports[0])
        except Exception:
            pass
        self.log(
            f"üîÑ Ports COM disponibles: {', '.join(ports) if ports else 'Aucun d√©tect√©'}"
        )

    def _run_print_test(self):
        """Ex√©cute le test d'impression"""
        try:
            repeat = int(self.repeat_var.get().strip() or 1)
            lines = int(self.lines_var.get().strip() or 20)
        except Exception:
            self.log("‚ö†Ô∏è Valeurs de r√©p√©titions/lignes invalides")
            return

        text_to_print = self.print_text_var.get().strip() or "Test Test Test"
        mode = self.mode_var.get()
        ip = self.ip_var.get().strip()
        port = self.port_var.get().strip()
        com_port = self.com_var.get().strip()
        baud = self.baud_var.get().strip()

        data = build_message(n_lines_each=lines,
                             text=text_to_print,
                             mode=mode,
                             ip=ip,
                             port=port,
                             com_port=com_port,
                             baud=baud)

        self.log(f"--- D√âBUT DU TEST ({mode.upper()}) ---")

        def worker():
            for i in range(repeat):
                self.log(f"Ex√©cution {i+1}/{repeat}...")
                if mode.lower() == "tcp":
                    try:
                        port_num = int(port or 9100)
                    except:
                        port_num = 9100
                    send_tcp(ip, port_num, data, self.log)
                else:
                    if not com_port or com_port == "Aucun d√©tect√©":
                        self.log("‚ö†Ô∏è Aucun port COM s√©lectionn√©")
                        return
                    try:
                        baud_num = int(baud or 9600)
                    except:
                        baud_num = 9600
                    send_serial(com_port, baud_num, data, self.log)
                time.sleep(0.5)
            self.log("‚úÖ Test termin√©\n")

        threading.Thread(target=worker, daemon=True).start()

    def _run_check_port(self):
        """V√©rifie si un port est ouvert"""
        host = self.check_host_var.get().strip() or "127.0.0.1"
        try:
            port = int(self.check_port_var.get().strip())
        except:
            port = 40000

        threading.Thread(target=lambda: check_tcp_port(host, port, self.log),
                         daemon=True).start()

    def _run_show_wifi_passwords(self):
        """R√©cup√®re les mots de passe WiFi"""
        threading.Thread(target=lambda: get_wifi_passwords(self.log),
                         daemon=True).start()

    def _run_apply_wallpaper(self):
        """Applique le wallpaper s√©lectionn√©"""
        wallpaper = self.selected_wallpaper_var.get()
        if wallpaper:
            threading.Thread(
                target=lambda: apply_wallpaper(wallpaper, self.log),
                daemon=True).start()
        else:
            self.log("‚ùå Aucun wallpaper s√©lectionn√©")

    def _run_tweak_taskbar(self):
        """Applique les tweaks de la barre des t√¢ches"""
        threading.Thread(target=lambda: tweak_taskbar(self.log),
                         daemon=True).start()

    def _run_disable_notifications(self):
        """D√©sactive les notifications Windows"""
        threading.Thread(
            target=lambda: disable_windows_notifications(self.log),
            daemon=True).start()

    def _run_restore_menu(self):
        """Restaure le menu contextuel classique"""
        threading.Thread(target=lambda: restore_context_menu(self.log),
                         daemon=True).start()

    def _run_uninstall_kb(self):
        """D√©sinstalle KB5064081"""
        threading.Thread(target=lambda: uninstall_kb5064081(self.log),
                         daemon=True).start()

    def _run_rename_pc(self):
        """Renomme le PC"""
        new_name = self.pc_name_var.get().strip()
        threading.Thread(target=lambda: rename_computer(new_name, self.log),
                         daemon=True).start()

    def _run_activate_windows(self, cmd):
        """Active Windows via PowerShell"""

        def worker():
            self.log(f"‚ñ∂ Ex√©cution PowerShell: {cmd}")
            try:
                import subprocess
                proc = subprocess.run([
                    "powershell", "-NoProfile", "-ExecutionPolicy", "Bypass",
                    "-Command", cmd
                ],
                                      capture_output=True,
                                      text=True,
                                      timeout=300)
                if proc.stdout:
                    self.log("----- PowerShell stdout -----")
                    for line in proc.stdout.splitlines():
                        self.log(line)
                if proc.stderr:
                    self.log("----- PowerShell stderr -----")
                    for line in proc.stderr.splitlines():
                        self.log(line)
                self.log(f"PowerShell termin√© (code {proc.returncode})")
            except Exception as e:
                self.log(f"‚ùå Erreur: {e}")

        threading.Thread(target=worker, daemon=True).start()

    def _show_system_info(self):
        """Affiche les informations syst√®me"""
        import platform
        import socket
        import getpass
        try:
            import psutil

            # Informations de base
            hostname = socket.gethostname()
            user = getpass.getuser()
            system = platform.system()
            release = platform.release()
            version = platform.version()

            # Processeur
            processor = platform.processor()
            cpu_count_physical = psutil.cpu_count(logical=False)
            cpu_count_logical = psutil.cpu_count(logical=True)
            cpu_freq = psutil.cpu_freq()
            cpu_usage = psutil.cpu_percent(interval=1)

            # Nom du CPU (Intel i7-9600K, AMD Ryzen 5600X, etc.)
            cpu_name = "Non disponible"
            try:
                cpu_info_proc = subprocess.run('wmic cpu get name',
                                               shell=True,
                                               capture_output=True,
                                               text=True,
                                               timeout=5)
                if cpu_info_proc.returncode == 0 and cpu_info_proc.stdout:
                    lines = cpu_info_proc.stdout.strip().split('\n')
                    if len(lines) > 1:
                        cpu_name = lines[1].strip()
            except:
                pass

            # M√©moire RAM
            ram = psutil.virtual_memory()
            ram_total = round(ram.total / (1024**3), 2)
            ram_used = round(ram.used / (1024**3), 2)
            ram_percent = ram.percent

            # Type et fr√©quence de la RAM (DDR3/DDR4 + MHz)
            ram_type = "Non disponible"
            ram_speed = "Non disponible"
            try:
                # Type de RAM (DDR3, DDR4, DDR5)
                ram_type_proc = subprocess.run(
                    'wmic memorychip get memorytype',
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=5)
                if ram_type_proc.returncode == 0 and ram_type_proc.stdout:
                    lines = [
                        l.strip()
                        for l in ram_type_proc.stdout.strip().split('\n')
                        if l.strip() and l.strip() != 'MemoryType'
                    ]
                    if lines:
                        # Codes: 20=DDR, 21=DDR2, 24=DDR3, 26=DDR4, 34=DDR5
                        type_code = lines[0].strip()
                        type_map = {
                            '20': 'DDR',
                            '21': 'DDR2',
                            '24': 'DDR3',
                            '26': 'DDR4',
                            '34': 'DDR5'
                        }
                        ram_type = type_map.get(type_code, f'Type {type_code}')

                # Fr√©quence de la RAM (MHz)
                ram_speed_proc = subprocess.run('wmic memorychip get speed',
                                                shell=True,
                                                capture_output=True,
                                                text=True,
                                                timeout=5)
                if ram_speed_proc.returncode == 0 and ram_speed_proc.stdout:
                    lines = [
                        l.strip()
                        for l in ram_speed_proc.stdout.strip().split('\n')
                        if l.strip() and l.strip() != 'Speed'
                    ]
                    if lines:
                        ram_speed = f"{lines[0].strip()} MHz"
            except:
                pass

            # Disques
            partitions = psutil.disk_partitions()

            self.log("=" * 60)
            self.log("                INFORMATIONS SYST√àME")
            self.log("=" * 60)

            self.log("\nüìã SYST√àME:")
            self.log(f"  Nom de l'ordinateur : {hostname}")
            self.log(f"  Utilisateur         : {user}")
            self.log(f"  OS                  : {system} {release}")
            self.log(f"  Version             : {version}")

            self.log("\nüîß PROCESSEUR:")
            self.log(f"  Nom / Mod√®le        : {cpu_name}")
            self.log(f"  D√©tails             : {processor}")
            self.log(f"  C≈ìurs physiques     : {cpu_count_physical}")
            self.log(f"  C≈ìurs logiques      : {cpu_count_logical}")
            if cpu_freq:
                self.log(
                    f"  Fr√©quence           : {cpu_freq.current:.0f} MHz (max: {cpu_freq.max:.0f} MHz)"
                )
            self.log(f"  Utilisation actuelle: {cpu_usage}%")

            self.log("\nüíæ M√âMOIRE RAM:")
            self.log(f"  Type                : {ram_type}")
            self.log(f"  Fr√©quence           : {ram_speed}")
            self.log(f"  Total               : {ram_total} GB")
            self.log(f"  Utilis√©e            : {ram_used} GB ({ram_percent}%)")
            self.log(
                f"  Disponible          : {round(ram.available / (1024**3), 2)} GB"
            )

            self.log("\nüíø DISQUES:")
            for partition in partitions:
                try:
                    usage = psutil.disk_usage(partition.mountpoint)
                    total = round(usage.total / (1024**3), 2)
                    used = round(usage.used / (1024**3), 2)
                    free = round(usage.free / (1024**3), 2)
                    percent = usage.percent

                    self.log(f"  {partition.device}")
                    self.log(f"    Point de montage  : {partition.mountpoint}")
                    self.log(f"    Syst√®me de fichiers: {partition.fstype}")
                    self.log(f"    Taille totale     : {total} GB")
                    self.log(f"    Espace utilis√©    : {used} GB ({percent}%)")
                    self.log(f"    Espace libre      : {free} GB")
                except Exception:
                    # Ignorer les lecteurs non accessibles
                    pass

            self.log("\n" + "=" * 60)

        except Exception as e:
            self.log(
                f"‚ùå Erreur lors de la r√©cup√©ration des infos syst√®me: {e}")

    def _run_create_shortcuts(self):
        """Cr√©e les raccourcis VELBO/VELSRV"""
        folder = self.shortcut_folder_var.get().strip()
        threading.Thread(
            target=lambda: create_veloce_shortcuts(folder, self.log),
            daemon=True).start()

    def _build_manage_users_options(self, parent):
        """Page de gestion des utilisateurs Windows"""
        f = ctk.CTkScrollableFrame(parent)
        f.pack(fill="both", expand=True, padx=6, pady=6)

        ctk.CTkLabel(f,
                     text="Gestion des utilisateurs Windows",
                     font=ctk.CTkFont(size=16,
                                      weight="bold")).pack(anchor="w",
                                                           pady=(0, 10))

        # Variables
        if not hasattr(self, 'user_name_var'):
            self.user_name_var = tk.StringVar(value="")
            self.user_pass_var = tk.StringVar(value="")
            self.user_admin_var = tk.BooleanVar(value=False)

        # Formulaire cr√©ation utilisateur
        form_frame = ctk.CTkFrame(f)
        form_frame.pack(fill="x", pady=8, padx=10)

        ctk.CTkLabel(form_frame, text="Nom d'utilisateur:").grid(row=0,
                                                                 column=0,
                                                                 sticky="w",
                                                                 padx=10,
                                                                 pady=5)
        ctk.CTkEntry(form_frame, textvariable=self.user_name_var,
                     width=250).grid(row=0, column=1, padx=10, pady=5)

        ctk.CTkLabel(form_frame, text="Mot de passe:").grid(row=1,
                                                            column=0,
                                                            sticky="w",
                                                            padx=10,
                                                            pady=5)
        ctk.CTkEntry(form_frame,
                     textvariable=self.user_pass_var,
                     width=250,
                     show="*").grid(row=1, column=1, padx=10, pady=5)

        ctk.CTkCheckBox(form_frame,
                        text="Ajouter aux administrateurs",
                        variable=self.user_admin_var).grid(row=2,
                                                           column=0,
                                                           columnspan=2,
                                                           sticky="w",
                                                           padx=10,
                                                           pady=5)

        ctk.CTkButton(form_frame,
                      text="‚ûï Cr√©er l'utilisateur",
                      width=200,
                      command=self._create_user,
                      fg_color="#2b6ee6",
                      hover_color="#2058c9").grid(row=3,
                                                  column=0,
                                                  columnspan=2,
                                                  pady=10)

        # Boutons presets
        preset_frame = ctk.CTkFrame(f)
        preset_frame.pack(fill="x", pady=8, padx=10)

        ctk.CTkLabel(preset_frame,
                     text="‚ö° Presets rapides:",
                     font=ctk.CTkFont(size=13,
                                      weight="bold")).pack(anchor="w",
                                                           padx=10,
                                                           pady=(10, 5))

        btn_grid = ctk.CTkFrame(preset_frame, fg_color="transparent")
        btn_grid.pack(fill="x", padx=10, pady=5)

        ctk.CTkButton(btn_grid,
                      text="admin / veloce123",
                      width=150,
                      command=lambda:
                      (self.user_name_var.set("admin"),
                       self.user_pass_var.set("veloce123"),
                       self.user_admin_var.set(True))).grid(row=0,
                                                            column=0,
                                                            padx=5,
                                                            pady=5)

        ctk.CTkButton(btn_grid,
                      text="kpitech / Log1tech",
                      width=150,
                      command=lambda:
                      (self.user_name_var.set("kpitech"),
                       self.user_pass_var.set("Log1tech"),
                       self.user_admin_var.set(True))).grid(row=0,
                                                            column=1,
                                                            padx=5,
                                                            pady=5)

        # Bouton lister les utilisateurs
        ctk.CTkButton(f,
                      text="üìã Afficher tous les utilisateurs",
                      width=250,
                      command=self._list_users,
                      fg_color="#16a34a",
                      hover_color="#15803d").pack(pady=10)

        # === SECTION AUTO-LOGIN ===
        autologin_frame = ctk.CTkFrame(f, fg_color="#2b2b2b")
        autologin_frame.pack(fill="x", pady=15, padx=10)

        ctk.CTkLabel(autologin_frame,
                     text="üîê Connexion automatique Windows",
                     font=ctk.CTkFont(size=13, weight="bold")).pack(anchor="w",
                                                                    padx=10,
                                                                    pady=(10, 5))

        # Afficher l'utilisateur auto-login actuel
        self.autologin_status_label = ctk.CTkLabel(autologin_frame,
                                                   text="‚è≥ Chargement...",
                                                   font=ctk.CTkFont(size=11))
        self.autologin_status_label.pack(anchor="w", padx=10, pady=(0, 5))

        # Bouton pour v√©rifier l'utilisateur auto-login
        ctk.CTkButton(autologin_frame,
                      text="üîç V√©rifier utilisateur auto-login",
                      width=220,
                      command=self._check_autologin,
                      fg_color="#0284c7",
                      hover_color="#0369a1").pack(anchor="w", padx=10, pady=5)

        # Formulaire pour configurer l'auto-login
        config_frame = ctk.CTkFrame(autologin_frame, fg_color="#1f2937")
        config_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(config_frame,
                     text="Configurer la connexion automatique:",
                     font=ctk.CTkFont(size=11, weight="bold")).grid(row=0, column=0,
                                                                    columnspan=2,
                                                                    sticky="w",
                                                                    padx=10,
                                                                    pady=(8, 5))

        if not hasattr(self, 'autologin_user_var'):
            self.autologin_user_var = tk.StringVar(value="")
            self.autologin_pass_var = tk.StringVar(value="")

        ctk.CTkLabel(config_frame, text="Utilisateur:").grid(row=1, column=0,
                                                             sticky="w",
                                                             padx=10, pady=5)
        ctk.CTkEntry(config_frame,
                     textvariable=self.autologin_user_var,
                     width=200).grid(row=1, column=1, padx=10, pady=5)

        ctk.CTkLabel(config_frame, text="Mot de passe:").grid(row=2, column=0,
                                                              sticky="w",
                                                              padx=10, pady=5)
        ctk.CTkEntry(config_frame,
                     textvariable=self.autologin_pass_var,
                     width=200,
                     show="*").grid(row=2, column=1, padx=10, pady=5)

        btn_row = ctk.CTkFrame(config_frame, fg_color="transparent")
        btn_row.grid(row=3, column=0, columnspan=2, pady=8)

        ctk.CTkButton(btn_row,
                      text="‚úÖ Activer auto-login",
                      width=140,
                      command=self._enable_autologin,
                      fg_color="#16a34a",
                      hover_color="#15803d").pack(side="left", padx=5)

        ctk.CTkButton(btn_row,
                      text="‚ùå D√©sactiver auto-login",
                      width=140,
                      command=self._disable_autologin,
                      fg_color="#dc2626",
                      hover_color="#b91c1c").pack(side="left", padx=5)

    def _create_user(self):
        """Cr√©e un nouvel utilisateur Windows"""
        name = self.user_name_var.get().strip()
        password = self.user_pass_var.get().strip()
        is_admin = self.user_admin_var.get()

        if not name or not password:
            self.log("‚ùå Nom d'utilisateur et mot de passe requis")
            return

        threading.Thread(target=lambda: add_windows_user(
            name, password, is_admin, True, self.log),
                         daemon=True).start()

    def _list_users(self):
        """Liste tous les utilisateurs Windows"""

        def worker():
            try:
                self.log("===== UTILISATEURS WINDOWS =====")
                result = subprocess.check_output("net user",
                                                 shell=True,
                                                 text=True)
                for line in result.splitlines():
                    if line.strip():
                        self.log(line)
                self.log("================================")
            except Exception as e:
                self.log(f"‚ùå Erreur: {e}")

        threading.Thread(target=worker, daemon=True).start()

    def _check_autologin(self):
        """V√©rifie l'utilisateur configur√© pour l'auto-login"""
        def worker():
            try:
                import winreg
                key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                    r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon",
                                    0, winreg.KEY_READ)

                try:
                    auto_enabled, _ = winreg.QueryValueEx(key, "AutoAdminLogon")
                    username, _ = winreg.QueryValueEx(key, "DefaultUserName")

                    if auto_enabled == "1":
                        status_text = f"‚úÖ Auto-login ACTIV√â pour: {username}"
                        color = "#10b981"
                        self.autologin_user_var.set(username)
                        self.log(f"‚ÑπÔ∏è Auto-login activ√© pour l'utilisateur: {username}")
                    else:
                        status_text = "‚ö†Ô∏è Auto-login D√âSACTIV√â"
                        color = "#f59e0b"
                        self.log("‚ÑπÔ∏è Auto-login d√©sactiv√©")
                except:
                    status_text = "‚ö†Ô∏è Auto-login D√âSACTIV√â (non configur√©)"
                    color = "#f59e0b"
                    self.log("‚ÑπÔ∏è Auto-login non configur√©")

                winreg.CloseKey(key)

            except Exception as e:
                status_text = f"‚ùå Erreur: {e}"
                color = "#ef4444"
                self.log(f"‚ùå Erreur v√©rification auto-login: {e}")

            # Mettre √† jour le label dans le thread principal
            self.after(0, lambda: self.autologin_status_label.configure(
                text=status_text, text_color=color))

        threading.Thread(target=worker, daemon=True).start()

    def _enable_autologin(self):
        """Active l'auto-login Windows"""
        username = self.autologin_user_var.get().strip()
        password = self.autologin_pass_var.get().strip()

        if not username:
            self.log("‚ùå Nom d'utilisateur requis")
            return

        def worker():
            try:
                import winreg
                self.log(f"‚ñ∂ Configuration auto-login pour: {username}")

                key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                    r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon",
                                    0, winreg.KEY_SET_VALUE)

                winreg.SetValueEx(key, "AutoAdminLogon", 0, winreg.REG_SZ, "1")
                winreg.SetValueEx(key, "DefaultUserName", 0, winreg.REG_SZ, username)
                if password:
                    winreg.SetValueEx(key, "DefaultPassword", 0, winreg.REG_SZ, password)

                winreg.CloseKey(key)

                self.log(f"‚úÖ Auto-login activ√© pour: {username}")
                self.log("‚ö†Ô∏è L'utilisateur se connectera automatiquement au prochain d√©marrage")

                # Mettre √† jour le statut
                self.after(0, lambda: self.autologin_status_label.configure(
                    text=f"‚úÖ Auto-login ACTIV√â pour: {username}",
                    text_color="#10b981"))

            except Exception as e:
                self.log(f"‚ùå Erreur activation auto-login: {e}")
                self.log("‚ö†Ô∏è N√©cessite les droits administrateur")

        threading.Thread(target=worker, daemon=True).start()

    def _disable_autologin(self):
        """D√©sactive l'auto-login Windows"""
        def worker():
            try:
                import winreg
                self.log("‚ñ∂ D√©sactivation de l'auto-login...")

                key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                    r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon",
                                    0, winreg.KEY_SET_VALUE)

                winreg.SetValueEx(key, "AutoAdminLogon", 0, winreg.REG_SZ, "0")

                # Optionnel: supprimer le mot de passe stock√©
                try:
                    winreg.DeleteValue(key, "DefaultPassword")
                except:
                    pass

                winreg.CloseKey(key)

                self.log("‚úÖ Auto-login d√©sactiv√©")
                self.log("‚ÑπÔ∏è Windows demandera un mot de passe au prochain d√©marrage")

                # Mettre √† jour le statut
                self.after(0, lambda: self.autologin_status_label.configure(
                    text="‚ö†Ô∏è Auto-login D√âSACTIV√â",
                    text_color="#f59e0b"))

            except Exception as e:
                self.log(f"‚ùå Erreur d√©sactivation auto-login: {e}")
                self.log("‚ö†Ô∏è N√©cessite les droits administrateur")

        threading.Thread(target=worker, daemon=True).start()

    def _update_remote_ids(self):
        """Met √† jour les IDs TeamViewer et AnyDesk"""
        tv_id = get_teamviewer_id()
        ad_id = get_anydesk_id()
        self.after(
            0, lambda: self.tv_label.configure(text=f"TeamViewer ID: {tv_id}"))
        self.after(
            0, lambda: self.ad_label.configure(text=f"AnyDesk ID: {ad_id}"))

    def show_release_notes(self):
        """Affiche les notes de version dans une fen√™tre popup"""
        from tkinter import Toplevel
        from tkinter import scrolledtext

        base_path = get_base_path()
        notes_path = os.path.join(base_path, "config", "releasesnotes.txt")

        if not os.path.exists(notes_path):
            self.log(f"‚ùå Fichier releasesnotes.txt introuvable dans config/")
            messagebox.showwarning(
                "Fichier introuvable",
                "Le fichier releasesnotes.txt est manquant dans config/")
            return

        win = Toplevel(self)
        win.title("Release Notes - Outils Syst√®me")
        win.geometry("700x500")
        win.resizable(True, True)
        win.grab_set()

        txt_area = scrolledtext.ScrolledText(win,
                                             wrap="word",
                                             font=("Consolas", 11))
        txt_area.pack(expand=True, fill="both", padx=10, pady=10)

        try:
            with open(notes_path, "r", encoding="utf-8") as f:
                txt_area.insert("1.0", f.read())
        except Exception as e:
            txt_area.insert("1.0",
                            f"Erreur lors de la lecture du fichier: {e}")

        txt_area.configure(state="disabled")

    def build_auto_setup_options(self, parent):
        """Page Auto Setup avec 3 boutons qui ouvrent des fen√™tres d√©di√©es"""
        f = ctk.CTkScrollableFrame(parent)
        f.pack(fill="both", expand=True, padx=6, pady=6)

        # Titre
        ctk.CTkLabel(f,
                     text="Auto Setup - Configuration automatique",
                     font=ctk.CTkFont(size=18,
                                      weight="bold")).pack(anchor="w",
                                                           pady=(0, 15))

        ctk.CTkLabel(f,
                     text="S√©lectionnez le type de poste √† configurer :",
                     font=ctk.CTkFont(size=12)).pack(anchor="w", pady=(0, 10))

        # Boutons pour ouvrir chaque fen√™tre
        btn_frame = ctk.CTkFrame(f, fg_color="transparent")
        btn_frame.pack(fill="x", pady=10)

        ctk.CTkButton(btn_frame,
                      text="üñ•Ô∏è Config PC",
                      width=220,
                      height=60,
                      font=ctk.CTkFont(size=14, weight="bold"),
                      fg_color="#16a34a",
                      hover_color="#15803d",
                      command=self._open_config_pc_window).grid(row=0,
                                                                column=0,
                                                                padx=15,
                                                                pady=10)

        ctk.CTkButton(btn_frame,
                      text="üí≥ Station Veloce",
                      width=220,
                      height=60,
                      font=ctk.CTkFont(size=14, weight="bold"),
                      fg_color="#2563eb",
                      hover_color="#1d4ed8",
                      command=self._open_veloce_window).grid(row=0,
                                                             column=2,
                                                             padx=15,
                                                             pady=10)

        # Descriptions
        desc_frame = ctk.CTkFrame(f)
        desc_frame.pack(fill="both", expand=True, pady=(15, 0))

        ctk.CTkLabel(desc_frame,
                     text="üìã Description des configurations :",
                     font=ctk.CTkFont(size=13,
                                      weight="bold")).pack(anchor="w",
                                                           padx=15,
                                                           pady=(15, 10))

        descriptions = """
‚Ä¢ Config PC:
  - Poste Standard: Tweaks Windows, utilisateurs, wallpaper
  - Poste Serveur: Raccourcis VELBO/VELSRV, partage c:\\veloce

‚Ä¢ Station Veloce:
  - Installation automatique r√©seau
  - Configuration POS compl√®te
"""

        ctk.CTkLabel(desc_frame,
                     text=descriptions,
                     justify="left",
                     font=ctk.CTkFont(size=11)).pack(anchor="w",
                                                     padx=25,
                                                     pady=(0, 15))

    def _check_veloce_share_status(self):
        """V√©rifie si le dossier c:\\veloce existe et est partag√©"""
        veloce_path = r"c:\veloce"
        exists = os.path.exists(veloce_path)
        shared = False

        if exists:
            try:
                # V√©rifier si le dossier est partag√© via WMI
                result = subprocess.run(
                    'wmic share where "path=\'c:\\\\veloce\'" get name',
                    capture_output=True,
                    text=True,
                    shell=True,
                    timeout=5)
                shared = "veloce" in result.stdout.lower()
            except:
                pass

        return exists, shared

    def _check_password_protected_sharing(self):
        """V√©rifie si le partage prot√©g√© par mot de passe est activ√©"""
        try:
            import winreg
            # V√©rifier la cl√© everyoneincludesanonymous
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                 r"SYSTEM\CurrentControlSet\Control\Lsa", 0,
                                 winreg.KEY_READ)
            value, _ = winreg.QueryValueEx(key, "everyoneincludesanonymous")
            winreg.CloseKey(key)

            # Si everyoneincludesanonymous = 1, le partage prot√©g√© est d√©sactiv√©
            # Si = 0 ou absent, le partage prot√©g√© est activ√©
            return value == 0
        except:
            # Par d√©faut, consid√©rer que le partage prot√©g√© est activ√©
            return True

    def _disable_password_protected_sharing(self, log_fn):
        """D√©sactive le partage prot√©g√© par mot de passe"""
        try:
            import winreg

            log_fn("‚ñ∂ D√©sactivation du partage prot√©g√© par mot de passe...")

            # √âtape 1: Modifier everyoneincludesanonymous
            key1 = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                  r"SYSTEM\CurrentControlSet\Control\Lsa", 0,
                                  winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key1, "everyoneincludesanonymous", 0,
                              winreg.REG_DWORD, 1)
            winreg.CloseKey(key1)
            log_fn("‚úì Cl√© 'everyoneincludesanonymous' d√©finie √† 1")

            # √âtape 2: Modifier RestrictNullSessAccess
            key2 = winreg.OpenKey(
                winreg.HKEY_LOCAL_MACHINE,
                r"SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters",
                0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key2, "RestrictNullSessAccess", 0,
                              winreg.REG_DWORD, 0)
            winreg.CloseKey(key2)
            log_fn("‚úì Cl√© 'RestrictNullSessAccess' d√©finie √† 0")

            ########

            key3 = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                  r"SYSTEM\CurrentControlSet\Control\Lsa", 0,
                                  winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key3, "ForceGuest", 0, winreg.REG_DWORD, 0)
            winreg.CloseKey(key3)
            log_fn("‚úì Cl√© 'ForceGuest' d√©finie √† 0 (d√©sactiv√©)")
            ####

            key4 = winreg.CreateKey(
                winreg.HKEY_LOCAL_MACHINE,
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System")
            winreg.SetValueEx(key4, "LocalAccountTokenFilterPolicy", 0,
                              winreg.REG_DWORD, 1)
            winreg.CloseKey(key4)
            log_fn(
                "‚úì Cl√© 'LocalAccountTokenFilterPolicy' d√©finie √† 1 (d√©sactiv√©)"
            )

            log_fn("‚úÖ Partage prot√©g√© par mot de passe d√©sactiv√©")
            log_fn(
                "‚ö†Ô∏è Red√©marrage ou d√©connexion/reconnexion du r√©seau requis pour appliquer"
            )

        except Exception as e:
            log_fn(f"‚ùå Erreur d√©sactivation partage prot√©g√©: {e}")
            log_fn("‚ö†Ô∏è N√©cessite droits administrateur")

    def _enable_password_protected_sharing(self, log_fn):
        """Active le partage prot√©g√© par mot de passe"""
        try:
            import winreg

            log_fn("‚ñ∂ Activation du partage prot√©g√© par mot de passe...")

            # √âtape 1: Modifier everyoneincludesanonymous
            key1 = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                  r"SYSTEM\CurrentControlSet\Control\Lsa", 0,
                                  winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key1, "everyoneincludesanonymous", 0,
                              winreg.REG_DWORD, 0)
            winreg.CloseKey(key1)
            log_fn("‚úì Cl√© 'everyoneincludesanonymous' d√©finie √† 0")

            # √âtape 2: Modifier RestrictNullSessAccess
            key2 = winreg.OpenKey(
                winreg.HKEY_LOCAL_MACHINE,
                r"SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters",
                0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key2, "RestrictNullSessAccess", 0,
                              winreg.REG_DWORD, 1)
            winreg.CloseKey(key2)
            log_fn("‚úì Cl√© 'RestrictNullSessAccess' d√©finie √† 1")

            #####

            key3 = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                  r"SYSTEM\CurrentControlSet\Control\Lsa", 0,
                                  winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key3, "ForceGuest", 0, winreg.REG_DWORD, 1)
            winreg.CloseKey(key3)
            log_fn("‚úì Cl√© 'ForceGuest' d√©finie √† 1 (activ√©)")

            ####

            key4 = winreg.CreateKey(
                winreg.HKEY_LOCAL_MACHINE,
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System")
            winreg.SetValueEx(key4, "LocalAccountTokenFilterPolicy", 0,
                              winreg.REG_DWORD, 0)
            winreg.CloseKey(key4)
            log_fn(
                "‚úì Cl√© 'LocalAccountTokenFilterPolicy' d√©finie √† 0 (activ√©)")

            log_fn("‚úÖ Partage prot√©g√© par mot de passe activ√©")
            log_fn(
                "‚ö†Ô∏è Red√©marrage ou d√©connexion/reconnexion du r√©seau requis pour appliquer"
            )

        except Exception as e:
            log_fn(f"‚ùå Erreur activation partage prot√©g√©: {e}")
            log_fn("‚ö†Ô∏è N√©cessite droits administrateur")

    # === NOUVELLES FONCTIONS POUR OPTIONS 1-8 ===

    def _disable_uac(self, log_fn):
        """Option 1: D√©sactiver le contr√¥le de compte utilisateur (UAC)"""
        try:
            import winreg

            log_fn("‚ñ∂ D√©sactivation du contr√¥le de compte utilisateur (UAC)...")

            # Modifier la cl√© de registre pour UAC
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                r"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System",
                                0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key, "EnableLUA", 0, winreg.REG_DWORD, 0)
            winreg.SetValueEx(key, "ConsentPromptBehaviorAdmin", 0, winreg.REG_DWORD, 0)
            winreg.SetValueEx(key, "PromptOnSecureDesktop", 0, winreg.REG_DWORD, 0)
            winreg.CloseKey(key)

            log_fn("‚úì Cl√©s UAC modifi√©es (EnableLUA=0, ConsentPromptBehaviorAdmin=0)")
            log_fn("‚úÖ UAC d√©sactiv√©")
            log_fn("‚ö†Ô∏è Red√©marrage requis pour appliquer les changements")

        except Exception as e:
            log_fn(f"‚ùå Erreur d√©sactivation UAC: {e}")
            log_fn("‚ö†Ô∏è N√©cessite droits administrateur")

    def _allow_veloce_firewall(self, log_fn):
        """Option 2: Autoriser Veloce Backoffice dans le pare-feu"""
        try:
            log_fn("‚ñ∂ Autorisation de Veloce Backoffice dans le pare-feu...")

            veloce_path = r"C:\Veloce\VelSrv\VelSrv.exe"

            # V√©rifier si le fichier existe
            if not os.path.exists(veloce_path):
                log_fn(f"‚ö†Ô∏è Fichier non trouv√©: {veloce_path}")
                log_fn("   Le pare-feu sera configur√© mais l'application n'est pas install√©e")

            # Ajouter une r√®gle de pare-feu pour Veloce Backoffice
            cmd = f'netsh advfirewall firewall add rule name="Veloce Backoffice" dir=in action=allow program="{veloce_path}" enable=yes profile=any'

            result = subprocess.run(cmd, capture_output=True, text=True, shell=True, timeout=30)

            if result.returncode == 0:
                log_fn("‚úì R√®gle de pare-feu ajout√©e pour Veloce Backoffice")
                log_fn("‚úÖ Veloce Backoffice autoris√© dans le pare-feu (Public & Priv√©)")
            else:
                # La r√®gle existe peut-√™tre d√©j√†, essayer de la mettre √† jour
                log_fn("  R√®gle existante d√©tect√©e, tentative de mise √† jour...")
                cmd_update = f'netsh advfirewall firewall set rule name="Veloce Backoffice" new enable=yes profile=any'
                result_update = subprocess.run(cmd_update, capture_output=True, text=True, shell=True, timeout=30)

                if result_update.returncode == 0:
                    log_fn("‚úì R√®gle de pare-feu mise √† jour pour Veloce Backoffice")
                    log_fn("‚úÖ Veloce Backoffice autoris√© dans le pare-feu (Public & Priv√©)")
                else:
                    log_fn("‚ùå √âchec de la configuration du pare-feu")
                    log_fn(f"   Erreur: {result_update.stderr.strip()}")
                    log_fn("‚ö†Ô∏è N√©cessite droits administrateur")

        except Exception as e:
            log_fn(f"‚ùå Erreur configuration pare-feu: {e}")
            log_fn("‚ö†Ô∏è N√©cessite droits administrateur")

    def _disable_network_sleep(self, log_fn):
        """Option 3: D√©sactiver la mise en veille des cartes r√©seau"""
        try:
            log_fn("‚ñ∂ D√©sactivation de la mise en veille des cartes r√©seau...")

            # Utiliser PowerShell pour modifier les param√®tres des adaptateurs r√©seau
            ps_cmd = '''
Get-NetAdapter | ForEach-Object {
    $adapter = $_
    $powerMgmt = Get-WmiObject MSPower_DeviceEnable -Namespace root\\wmi | Where-Object {$_.InstanceName -match [regex]::Escape($adapter.PnPDeviceID)}
    if ($powerMgmt) {
        $powerMgmt.Enable = $false
        $powerMgmt.Put()
        Write-Output "D√©sactiv√© pour: $($adapter.Name)"
    }
}
'''

            result = subprocess.run(['powershell', '-Command', ps_cmd],
                                   capture_output=True, text=True, timeout=60)

            if result.returncode == 0:
                output_lines = result.stdout.strip().split('\n')
                for line in output_lines:
                    if line.strip():
                        log_fn(f"  ‚úì {line.strip()}")
                log_fn("‚úÖ Mise en veille des cartes r√©seau d√©sactiv√©e")
            else:
                log_fn("‚ö†Ô∏è Impossible de modifier certaines cartes r√©seau")
                log_fn("   Essai avec m√©thode alternative...")

                # M√©thode alternative via netsh
                subprocess.run('powercfg /change standby-timeout-ac 0', shell=True, timeout=10)
                subprocess.run('powercfg /change standby-timeout-dc 0', shell=True, timeout=10)
                log_fn("‚úì Param√®tres d'alimentation r√©seau modifi√©s")

        except Exception as e:
            log_fn(f"‚ùå Erreur d√©sactivation veille r√©seau: {e}")
            log_fn("‚ö†Ô∏è N√©cessite droits administrateur")

    def _set_timezone_and_sync(self, log_fn):
        """Option 4: Configurer fuseau horaire America/Toronto et synchroniser"""
        try:
            log_fn("‚ñ∂ Configuration du fuseau horaire et synchronisation...")

            # D√©finir le fuseau horaire sur America/Toronto (Eastern Time)
            cmd_tz = 'tzutil /s "Eastern Standard Time"'
            result = subprocess.run(cmd_tz, capture_output=True, text=True, shell=True, timeout=10)

            if result.returncode == 0:
                log_fn("‚úì Fuseau horaire d√©fini sur America/Toronto (Eastern)")
            else:
                log_fn("‚ö†Ô∏è Erreur lors du changement de fuseau horaire")

            # Forcer la synchronisation de l'heure
            log_fn("  Synchronisation de l'heure en cours...")

            # Arr√™ter le service W32Time
            subprocess.run('net stop w32time', capture_output=True, shell=True, timeout=10)

            # Configurer le service pour d√©marrer automatiquement
            subprocess.run('sc config w32time start= auto', capture_output=True, shell=True, timeout=10)
            log_fn("‚úì Service de temps configur√© en d√©marrage automatique")

            # Red√©marrer le service W32Time
            subprocess.run('net start w32time', capture_output=True, shell=True, timeout=10)
            log_fn("‚úì Service de temps red√©marr√©")

            # Enregistrer le service avec le serveur de temps
            subprocess.run('w32tm /register', capture_output=True, shell=True, timeout=10)

            # Configurer les serveurs de temps NTP
            time_servers = 'time.windows.com,time.nist.gov,pool.ntp.org'
            subprocess.run(f'w32tm /config /manualpeerlist:"{time_servers}" /syncfromflags:manual /reliable:YES /update',
                          capture_output=True, shell=True, timeout=15)
            log_fn("‚úì Serveurs de temps NTP configur√©s")

            # Forcer la resynchronisation imm√©diate
            result_sync = subprocess.run('w32tm /resync /force',
                                        capture_output=True, text=True, shell=True, timeout=30)

            if "successfully" in result_sync.stdout.lower() or result_sync.returncode == 0:
                log_fn("‚úì Heure synchronis√©e avec succ√®s")
            else:
                log_fn("‚ö†Ô∏è La synchronisation peut prendre quelques instants")

            # Activer la synchronisation automatique
            subprocess.run('w32tm /config /update', capture_output=True, shell=True, timeout=10)
            log_fn("‚úì Synchronisation automatique activ√©e")

            log_fn("‚úÖ Fuseau horaire et synchronisation configur√©s")

        except Exception as e:
            log_fn(f"‚ùå Erreur configuration fuseau horaire: {e}")

    def _set_network_private(self, log_fn):
        """Option 3b: Mettre la carte r√©seau en mode Priv√© (au lieu de Public)"""
        try:
            log_fn("‚ñ∂ Configuration carte r√©seau en mode Priv√©...")

            # PowerShell pour d√©finir toutes les cartes r√©seau en mode Priv√©
            ps_cmd = 'Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private'

            result = subprocess.run(['powershell', '-Command', ps_cmd],
                                  capture_output=True, text=True, timeout=30)

            if result.returncode == 0:
                log_fn("‚úì Carte(s) r√©seau configur√©e(s) en mode Priv√©")
                log_fn("‚úÖ Configuration r√©seau Priv√© termin√©e")
            else:
                log_fn(f"‚ö†Ô∏è R√©sultat de la commande: {result.stderr.strip() if result.stderr else 'OK'}")
                log_fn("‚úì Commande ex√©cut√©e (v√©rifier manuellement si n√©cessaire)")

        except Exception as e:
            log_fn(f"‚ùå Erreur configuration r√©seau Priv√©: {e}")
            log_fn("‚ö†Ô∏è Configuration manuelle requise:")
            log_fn("   Param√®tres ‚Üí R√©seau ‚Üí Propri√©t√©s ‚Üí Profil r√©seau ‚Üí Priv√©")

    def _set_best_performance(self, log_fn):
        """Option 5: Configurer les meilleures performances syst√®me"""
        try:
            import winreg

            log_fn("‚ñ∂ Configuration des meilleures performances syst√®me...")

            # Modifier la cl√© de registre pour les performances visuelles
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                                r"Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects",
                                0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key, "VisualFXSetting", 0, winreg.REG_DWORD, 2)  # 2 = Best Performance
            winreg.CloseKey(key)

            log_fn("‚úì Param√®tres de performances visuelles modifi√©s")

            # D√©sactiver les animations
            key2 = winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                                 r"Control Panel\Desktop\WindowMetrics",
                                 0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key2, "MinAnimate", 0, winreg.REG_SZ, "0")
            winreg.CloseKey(key2)

            log_fn("‚úì Animations d√©sactiv√©es")
            log_fn("‚úÖ Meilleures performances configur√©es")
            log_fn("‚ö†Ô∏è Red√©marrage ou d√©connexion/reconnexion recommand√©")

        except Exception as e:
            log_fn(f"‚ùå Erreur configuration performances: {e}")

    def _set_power_performance(self, log_fn):
        """Option 6: Configurer le mode d'alimentation performance"""
        try:
            log_fn("‚ñ∂ Configuration du mode d'alimentation performance...")

            # D√©finir le mode de performance √©lev√©e
            cmd_power = 'powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c'  # GUID du mode Performance √©lev√©e
            subprocess.run(cmd_power, capture_output=True, shell=True, timeout=10)
            log_fn("‚úì Mode alimentation 'Performance √©lev√©e' activ√©")

            # D√©sactiver la mise en veille
            subprocess.run('powercfg /change standby-timeout-ac 0', shell=True, timeout=10)
            subprocess.run('powercfg /change standby-timeout-dc 0', shell=True, timeout=10)
            log_fn("‚úì Mise en veille d√©sactiv√©e")

            # Jamais √©teindre l'√©cran
            subprocess.run('powercfg /change monitor-timeout-ac 0', shell=True, timeout=10)
            subprocess.run('powercfg /change monitor-timeout-dc 0', shell=True, timeout=10)
            log_fn("‚úì Extinction automatique de l'√©cran d√©sactiv√©e")

            # Arr√™t du disque dur = 0
            subprocess.run('powercfg /change disk-timeout-ac 0', shell=True, timeout=10)
            subprocess.run('powercfg /change disk-timeout-dc 0', shell=True, timeout=10)
            log_fn("‚úì Arr√™t automatique du disque dur d√©sactiv√©")

            log_fn("‚úÖ Mode alimentation performance configur√©")

        except Exception as e:
            log_fn(f"‚ùå Erreur configuration alimentation: {e}")

    def _install_ninite(self, log_fn):
        """Option 9: Installer Ninite (Notepad++, 7zip, Foxit, TightVNC)"""
        try:
            log_fn("‚ñ∂ Installation de Ninite en cours...")

            # Chemin vers ninite.exe
            ninite_path = os.path.join(os.path.dirname(__file__), '..', 'assets', 'installers', 'ninite.exe')
            ninite_path = os.path.abspath(ninite_path)

            if not os.path.exists(ninite_path):
                log_fn("‚ùå Fichier ninite.exe non trouv√© dans assets/installers/")
                log_fn("   Veuillez placer ninite.exe dans le dossier assets/installers/")
                return

            log_fn(f"‚úì Fichier ninite.exe trouv√©: {ninite_path}")
            log_fn("  Lancement de l'installation...")
            log_fn("  ‚è≥ Cela peut prendre plusieurs minutes (Notepad++, 7zip, Foxit, TightVNC)")
            log_fn("  ‚è≥ Veuillez patienter, ne pas fermer la fen√™tre...")

            # Lancer ninite SANS param√®tre (il est silencieux par d√©faut)
            # NE PAS CAPTURER stdout/stderr pour √©viter le blocage des pipes
            try:
                # Utiliser CREATE_NO_WINDOW sur Windows pour ex√©cution silencieuse
                creation_flags = 0x08000000 if hasattr(subprocess, 'CREATE_NO_WINDOW') else 0

                result = subprocess.run([ninite_path],
                                       timeout=600,
                                       creationflags=creation_flags)

                if result.returncode == 0:
                    log_fn("‚úì Installation de Ninite termin√©e avec succ√®s")
                else:
                    log_fn(f"‚úì Installation termin√©e (code retour: {result.returncode})")

                # Attendre et configurer le mot de passe VNC TightVNC
                log_fn("")
                log_fn("  Configuration du mot de passe VNC en cours...")
                self._configure_vnc_password(log_fn)

            except subprocess.TimeoutExpired:
                log_fn("‚ö†Ô∏è Installation prend plus de 10 minutes")
                log_fn("   L'installation continue probablement en arri√®re-plan")
                log_fn("   Configurez le mot de passe VNC manuellement plus tard")

            log_fn("‚úÖ Processus Ninite termin√©")

        except Exception as e:
            log_fn(f"‚ùå Erreur installation Ninite: {e}")
            log_fn("   V√©rifiez que le fichier ninite.exe est correct")

    def _configure_vnc_password(self, log_fn):
        """Configurer le mot de passe VNC TightVNC √† Log1tech"""
        try:
            import time

            log_fn("‚ñ∂ Configuration du mot de passe VNC...")
            log_fn("  Attente de l'installation de TightVNC...")

            # Chemins possibles pour TightVNC
            vnc_paths = [
                r"C:\Program Files\TightVNC\tvnserver.exe",
                r"C:\Program Files (x86)\TightVNC\tvnserver.exe"
            ]

            # Attendre jusqu'√† 60 secondes que TightVNC soit install√©
            vnc_server_path = None
            max_wait = 60
            wait_interval = 5

            for attempt in range(max_wait // wait_interval):
                for path in vnc_paths:
                    if os.path.exists(path):
                        vnc_server_path = path
                        break

                if vnc_server_path:
                    break

                if attempt == 0:
                    log_fn(f"  Attente installation TightVNC... ({wait_interval * (attempt + 1)}s)")
                elif attempt < (max_wait // wait_interval) - 1:
                    log_fn(f"  Toujours en attente... ({wait_interval * (attempt + 1)}s)")

                time.sleep(wait_interval)

            if vnc_server_path:
                log_fn(f"‚úì TightVNC Server d√©tect√©: {vnc_server_path}")

                # Attendre encore 3 secondes pour que l'installation se finalise
                time.sleep(3)

                # Configurer TightVNC pour d√©marrage automatique + mot de passe
                try:
                    import winreg

                    log_fn("  Configuration du service TightVNC...")

                    # Configurer le service pour d√©marrage automatique
                    subprocess.run('sc config tvnserver start= auto', 
                                  capture_output=True, shell=True, timeout=10)
                    log_fn("‚úì Service TightVNC configur√© pour d√©marrage automatique")

                    # Arr√™ter le service VNC s'il tourne
                    subprocess.run('net stop tvnserver', capture_output=True, shell=True, timeout=10)
                    time.sleep(1)

                    # Configurer via le registre avec les valeurs chiffr√©es
                    try:
                        # Ouvrir ou cr√©er la cl√© TightVNC Server
                        key = winreg.CreateKey(winreg.HKEY_LOCAL_MACHINE, 
                                              r"SOFTWARE\TightVNC\Server")

                        # Configurer les param√®tres de base
                        winreg.SetValueEx(key, "AcceptRfbConnections", 0, winreg.REG_DWORD, 1)
                        winreg.SetValueEx(key, "LoopbackOnly", 0, winreg.REG_DWORD, 0)
                        winreg.SetValueEx(key, "AllowLoopback", 0, winreg.REG_DWORD, 1)
                        winreg.SetValueEx(key, "UseAuthentication", 0, winreg.REG_DWORD, 1)

                        # Mot de passe "Log1tech" chiffr√© en DES VNC (8 bytes)
                        # Valeurs hexad√©cimales du fichier .reg fourni par l'utilisateur
                        password_encrypted = bytes([0x5d, 0xd9, 0xd3, 0x3a, 0x0c, 0xed, 0x17, 0xdb])
                        control_password_encrypted = bytes([0x5d, 0xd9, 0xd3, 0x3a, 0x0c, 0xed, 0x17, 0xdb])

                        # √âcrire les mots de passe chiffr√©s dans le registre
                        winreg.SetValueEx(key, "Password", 0, winreg.REG_BINARY, password_encrypted)
                        winreg.SetValueEx(key, "ControlPassword", 0, winreg.REG_BINARY, control_password_encrypted)

                        winreg.CloseKey(key)
                        log_fn("‚úì Configuration registre TightVNC mise √† jour")
                        log_fn("‚úì Mots de passe chiffr√©s √©crits dans le registre")

                    except Exception as reg_error:
                        log_fn(f"‚ö†Ô∏è Erreur configuration registre: {reg_error}")

                    # Red√©marrer le service
                    result = subprocess.run('net start tvnserver', 
                                          capture_output=True, shell=True, timeout=10)

                    if result.returncode == 0:
                        log_fn("‚úì Service TightVNC d√©marr√©")
                    else:
                        log_fn("‚ö†Ô∏è D√©marrage du service (v√©rifier manuellement)")

                    log_fn("‚úÖ Configuration VNC termin√©e")
                    log_fn("  ‚úì D√©marrage automatique: Activ√©")
                    log_fn("  ‚úì Mot de passe: Log1tech (Primary Password)")
                    log_fn("")
                    log_fn("‚ö†Ô∏è Si le mot de passe ne fonctionne pas, configurez manuellement:")
                    log_fn("   1. Clic droit sur l'ic√¥ne TightVNC (barre des t√¢ches)")
                    log_fn("   2. Administration ‚Üí Param√®tres du serveur")
                    log_fn("   3. Onglet 'Authentification' ‚Üí Primary Password")
                    log_fn("   4. Entrer: Log1tech")

                except Exception as e:
                    log_fn(f"‚ö†Ô∏è Configuration automatique √©chou√©e: {e}")
                    log_fn("   Configurez manuellement le service et mot de passe VNC")

            else:
                log_fn("‚ö†Ô∏è TightVNC Server non trouv√© apr√®s 60 secondes")
                log_fn("   L'installation a peut-√™tre √©chou√© ou n'est pas termin√©e")
                log_fn("   Mot de passe recommand√©: Log1tech (√† configurer manuellement)")

        except Exception as e:
            log_fn(f"‚ö†Ô∏è Configuration VNC manuelle requise: {e}")
            log_fn("   Mot de passe recommand√©: Log1tech")

    def _set_active_hours(self, log_fn, start_hour, end_hour):
        """Option 8: Configurer les heures actives du syst√®me"""
        try:
            import winreg

            log_fn(f"‚ñ∂ Configuration des heures actives ({start_hour}h - {end_hour}h)...")

            # Valider les heures
            try:
                start = int(start_hour)
                end = int(end_hour)
                if start < 0 or start > 23 or end < 0 or end > 23:
                    log_fn("‚ùå Les heures doivent √™tre entre 0 et 23")
                    return
                # Permettre les heures passant minuit (ex: 17h-5h est valide)
                # Pas de v√©rification start >= end
            except ValueError:
                log_fn("‚ùå Format d'heure invalide")
                return

            # Modifier la cl√© de registre pour les heures actives
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,
                                r"SOFTWARE\Microsoft\WindowsUpdate\UX\Settings",
                                0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key, "ActiveHoursStart", 0, winreg.REG_DWORD, start)
            winreg.SetValueEx(key, "ActiveHoursEnd", 0, winreg.REG_DWORD, end)
            winreg.CloseKey(key)

            if start >= end:
                log_fn(f"‚úì Heures actives d√©finies: {start}h - {end}h (passant minuit)")
            else:
                log_fn(f"‚úì Heures actives d√©finies: {start}h - {end}h")
            log_fn("‚úÖ Heures actives configur√©es")
            log_fn("   Windows ne red√©marrera pas automatiquement pendant ces heures")

        except Exception as e:
            log_fn(f"‚ùå Erreur configuration heures actives: {e}")
            log_fn("‚ö†Ô∏è N√©cessite droits administrateur")

    def _open_config_pc_window(self):
        """Ouvre la fen√™tre Config PC avec 2 colonnes (Standard | Serveur)"""
        from tkinter import Toplevel

        # Cr√©er la fen√™tre
        window = Toplevel(self)
        window.title("Auto Setup - Config PC")
        window.geometry("1000x580")
        window.resizable(True, True)
        window.transient(self)
        window.grab_set()

        # Maximiser la fen√™tre au chargement
        try:
            window.state('zoomed')  # Windows
        except:
            window.attributes('-zoomed', True)  # Linux

        # Frame principal
        main_frame = ctk.CTkFrame(window)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # Titre
        #ctk.CTkLabel(main_frame, text="üñ•Ô∏è Config PC",
        #             font=ctk.CTkFont(size=14, weight="bold")).pack(pady=(0,6))

        # Container horizontal: 3 colonnes (Standard | Serveur+Options | Log)
        content_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, pady=(0, 6))
        content_frame.grid_columnconfigure(0, weight=1)
        content_frame.grid_columnconfigure(1, weight=1)
        content_frame.grid_columnconfigure(2, weight=1)

        # Variables
        standard_vars = {
            'taskbar': tk.BooleanVar(value=True),
            'notifications': tk.BooleanVar(value=True),
            'user_admin': tk.BooleanVar(value=True),
            'user_kpitech': tk.BooleanVar(value=True),
            'wallpaper': tk.BooleanVar(value=True),
        }
        serveur_vars = {
            'shortcuts': tk.BooleanVar(value=False),
            'share': tk.BooleanVar(value=False),
        }
        rename_var = tk.BooleanVar(value=False)
        current_pc_name = os.environ.get("COMPUTERNAME", "")
        pc_name_var = tk.StringVar(value=current_pc_name)
        restart_var = tk.BooleanVar(value=False)

        # === COLONNE 1: POSTE STANDARD ===
        col1 = ctk.CTkFrame(content_frame, fg_color="#2b2b2b")
        col1.grid(row=0, column=0, sticky="nsew", padx=(0, 3))

        ctk.CTkLabel(col1,
                     text="üìã Poste Standard",
                     font=ctk.CTkFont(size=12,
                                      weight="bold")).pack(pady=(6, 4))

        ctk.CTkCheckBox(col1,
                        text="‚úì Tweak barre t√¢ches",
                        variable=standard_vars['taskbar']).pack(anchor="w",
                                                                padx=8,
                                                                pady=1)
        ctk.CTkCheckBox(col1,
                        text="‚úì D√©sactiver notif.",
                        variable=standard_vars['notifications']).pack(
                            anchor="w", padx=8, pady=1)
        ctk.CTkCheckBox(col1,
                        text="‚úì User 'admin'",
                        variable=standard_vars['user_admin']).pack(anchor="w",
                                                                   padx=8,
                                                                   pady=1)
        ctk.CTkCheckBox(col1,
                        text="‚úì User 'kpitech'",
                        variable=standard_vars['user_kpitech']).pack(
                            anchor="w", padx=8, pady=1)
        ctk.CTkCheckBox(col1,
                        text="‚úì Wallpaper KPI",
                        variable=standard_vars['wallpaper']).pack(anchor="w",
                                                                  padx=8,
                                                                  pady=1)

        # === NOUVELLES OPTIONS ===

        # Option 1: D√©sactiver UAC (coch√©e par d√©faut)
        standard_vars['disable_uac'] = tk.BooleanVar(value=True)
        ctk.CTkCheckBox(col1,
                        text="‚úì D√©sactiver UAC",
                        variable=standard_vars['disable_uac']).pack(anchor="w",
                                                                   padx=8,
                                                                   pady=1)

        # Option 3: D√©sactiver mise en veille des cartes r√©seau (coch√©e par d√©faut)
        standard_vars['disable_network_sleep'] = tk.BooleanVar(value=True)
        ctk.CTkCheckBox(col1,
                        text="‚úì D√©sactiver veille cartes r√©seau",
                        variable=standard_vars['disable_network_sleep']).pack(anchor="w",
                                                                              padx=8,
                                                                              pady=1)

        # Option 3b: Mettre carte r√©seau en mode Priv√© (coch√©e par d√©faut)
        standard_vars['network_private'] = tk.BooleanVar(value=True)
        ctk.CTkCheckBox(col1,
                        text="‚úì Mettre carte r√©seau en mode Priv√©",
                        variable=standard_vars['network_private']).pack(anchor="w",
                                                                        padx=8,
                                                                        pady=1)

        # Option 4: Fuseau horaire + synchronisation (coch√©e par d√©faut)
        standard_vars['timezone_sync'] = tk.BooleanVar(value=True)
        ctk.CTkCheckBox(col1,
                        text="‚úì Fuseau horaire + sync",
                        variable=standard_vars['timezone_sync']).pack(anchor="w",
                                                                      padx=8,
                                                                      pady=1)

        # Option 5: Performances syst√®me (coch√©e par d√©faut)
        standard_vars['best_performance'] = tk.BooleanVar(value=True)
        ctk.CTkCheckBox(col1,
                        text="‚úì Meilleures performances",
                        variable=standard_vars['best_performance']).pack(anchor="w",
                                                                         padx=8,
                                                                         pady=1)

        # Option 6: Options d'alimentation (coch√©e par d√©faut)
        standard_vars['power_options'] = tk.BooleanVar(value=True)
        ctk.CTkCheckBox(col1,
                        text="‚úì Mode alimentation performance",
                        variable=standard_vars['power_options']).pack(anchor="w",
                                                                      padx=8,
                                                                      pady=1)

        # === OPTION 8: HEURES ACTIVES DU SYST√àME ===
        standard_vars['active_hours'] = tk.BooleanVar(value=True)
        standard_vars['active_hours_start'] = tk.StringVar(value="8")
        standard_vars['active_hours_end'] = tk.StringVar(value="17")

        active_hours_frame = ctk.CTkFrame(col1, fg_color="transparent")
        active_hours_frame.pack(anchor="w", padx=8, pady=(6, 2))

        ctk.CTkCheckBox(active_hours_frame,
                        text="‚úì Modifier heures actives",
                        variable=standard_vars['active_hours']).pack(anchor="w", pady=1)

        # Champ conditionnel pour les heures
        hours_input_frame = ctk.CTkFrame(active_hours_frame, fg_color="transparent")
        hours_input_frame.pack(anchor="w", padx=20, pady=(2, 0))

        ctk.CTkLabel(hours_input_frame, 
                     text="De :", 
                     font=ctk.CTkFont(size=10)).pack(side="left", padx=(0, 2))

        start_entry = ctk.CTkEntry(hours_input_frame,
                                   textvariable=standard_vars['active_hours_start'],
                                   width=40, height=22,
                                   font=ctk.CTkFont(size=10))
        start_entry.pack(side="left", padx=2)

        ctk.CTkLabel(hours_input_frame, 
                     text="h √† :", 
                     font=ctk.CTkFont(size=10)).pack(side="left", padx=(4, 2))

        end_entry = ctk.CTkEntry(hours_input_frame,
                                 textvariable=standard_vars['active_hours_end'],
                                 width=40, height=22,
                                 font=ctk.CTkFont(size=10))
        end_entry.pack(side="left", padx=2)

        ctk.CTkLabel(hours_input_frame, 
                     text="h", 
                     font=ctk.CTkFont(size=10)).pack(side="left", padx=(0, 4))

        # Fonction pour activer/d√©sactiver le champ conditionnel
        def toggle_hours_input():
            if standard_vars['active_hours'].get():
                start_entry.configure(state="normal")
                end_entry.configure(state="normal")
            else:
                start_entry.configure(state="disabled")
                end_entry.configure(state="disabled")

        # Activer par d√©faut si la checkbox est coch√©e
        if standard_vars['active_hours'].get():
            start_entry.configure(state="normal")
            end_entry.configure(state="normal")
        else:
            start_entry.configure(state="disabled")
            end_entry.configure(state="disabled")

        # Lier le changement de la checkbox
        standard_vars['active_hours'].trace_add('write', lambda *args: toggle_hours_input())

        # === OPTION 9: INSTALLATION NINITE (Notepad++, 7zip, Foxit, TightVNC) ===
        standard_vars['install_ninite'] = tk.BooleanVar(value=True)
        ctk.CTkCheckBox(col1,
                        text="‚úì Installer Ninite (Notepad++, 7zip, Foxit, TightVNC, TeamViewer)",
                        variable=standard_vars['install_ninite']).pack(anchor="w",
                                                                       padx=8,
                                                                       pady=(6, 1))

        # === OPTION 10: R√âTABLIR MENU CONTEXTUEL CLASSIQUE (Windows 11) ===
        standard_vars['restore_context_menu'] = tk.BooleanVar(value=True)
        ctk.CTkCheckBox(col1,
                        text="‚úì R√©tablir menu contextuel classique (Win11)",
                        variable=standard_vars['restore_context_menu']).pack(anchor="w",
                                                                             padx=8,
                                                                             pady=(1, 4))

        # Statut partage prot√©g√© par mot de passe
        password_sharing_enabled = self._check_password_protected_sharing()

        status_pw_frame = ctk.CTkFrame(col1, fg_color="transparent")
        status_pw_frame.pack(anchor="w", padx=8, pady=(2, 1))

        ctk.CTkLabel(status_pw_frame,
                     text="üîí Partage r√©seau :",
                     font=ctk.CTkFont(size=9, weight="bold"),
                     text_color="#fbbf24").pack(anchor="w")

        # --- Statut visuel ---
        if password_sharing_enabled:
            status_pw_text = "  üîí Prot√©g√© par mot de passe"
            pw_color = "#f59e0b"
        else:
            status_pw_text = "  üîì Ouvert (sans mot de passe)"
            pw_color = "#10b981"

        ctk.CTkLabel(status_pw_frame,
                     text=status_pw_text,
                     font=ctk.CTkFont(size=8),
                     text_color=pw_color).pack(anchor="w", padx=8, pady=(1, 1))

        # --- Choix d‚Äôaction ---
        standard_vars['enable_password_sharing_config'] = tk.BooleanVar(value=True)
        standard_vars['password_sharing_action'] = tk.StringVar(value="D√©sactiver protection")


        ctk.CTkCheckBox(col1,
                        text="‚úì Modifier protection partage",
                        variable=standard_vars['enable_password_sharing_config']).pack(anchor="w",
                                                                                       padx=8,
                                                                                       pady=(1, 1))

        pw_choice_frame = ctk.CTkFrame(col1, fg_color="transparent")
        pw_choice_frame.pack(anchor="w", padx=8, pady=(1, 4))

        ctk.CTkOptionMenu(
            pw_choice_frame,
            variable=standard_vars['password_sharing_action'],
            values=["Activer protection", "D√©sactiver protection"],
            width=180,
            height=22,
            font=ctk.CTkFont(size=10)).pack(anchor="w")


        # --- Cl√©s de registre li√©es au partage r√©seau (repliables) ---
        reg_frame = ctk.CTkFrame(
            col1, fg_color="#1f2937")  # changer opt_frame ‚Üí col1
        reg_frame.pack(fill="x", padx=6, pady=(4, 6))

        # Sous-frame pour les cl√©s (masqu√©e/affich√©e)
        reg_keys_frame = ctk.CTkFrame(reg_frame, fg_color="#1f2937")

        # √âtat de visibilit√©
        reg_visible = tk.BooleanVar(value=False)

        def toggle_reg_keys():
            if reg_visible.get():
                # Masquer
                reg_keys_frame.pack_forget()
                arrow_label.configure(text="‚ñ∏")  # fl√®che vers la droite
                reg_visible.set(False)
            else:
                # Afficher
                reg_keys_frame.pack(fill="x", padx=6, pady=(2, 4))
                arrow_label.configure(text="‚ñæ")  # fl√®che vers le bas
                reg_visible.set(True)

        # Ligne du titre avec fl√®che
        title_frame = ctk.CTkFrame(reg_frame, fg_color="transparent")
        title_frame.pack(fill="x", pady=(4, 2))

        arrow_label = ctk.CTkLabel(title_frame,
                                   text="‚ñ∏",
                                   text_color="#fbbf24",
                                   font=ctk.CTkFont(size=12, weight="bold"))
        arrow_label.pack(side="left", padx=(6, 2))

        title_label = ctk.CTkLabel(
            title_frame,
            text="üß© Cl√©s de registre modifi√© (partage r√©seau)",
            font=ctk.CTkFont(size=10, weight="bold"),
            text_color="#fbbf24")
        title_label.pack(side="left")

        # Permettre le clic sur la fl√®che et le texte
        arrow_label.bind("<Button-1>", lambda e: toggle_reg_keys())
        title_label.bind("<Button-1>", lambda e: toggle_reg_keys())

        # Liste des cl√©s
        key_color = "#facc15"
        reg_keys = [
            "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\n ‚Üí everyoneincludesanonymous",
            "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\n ‚Üí ForceGuest",
            "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\n ‚Üí restrictanonymous",
            "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\n ‚Üí LocalAccountTokenFilterPolicy"
        ]

        for k in reg_keys:
            ctk.CTkLabel(reg_keys_frame,
                         text=k,
                         font=ctk.CTkFont(size=8),
                         text_color=key_color,
                         justify="left").pack(anchor="w", padx=10)

        # === COLONNE 2: SERVEUR + OPTIONS ===
        col2 = ctk.CTkFrame(content_frame, fg_color="transparent")
        col2.grid(row=0, column=1, sticky="nsew", padx=3)

        # Serveur
        serv_frame = ctk.CTkFrame(col2, fg_color="#2b2b2b")
        serv_frame.pack(fill="x", pady=(0, 3))

        ctk.CTkLabel(serv_frame,
                     text="üñ•Ô∏è Poste Serveur",
                     font=ctk.CTkFont(size=12,
                                      weight="bold")).pack(pady=(6, 4))

        ctk.CTkCheckBox(serv_frame,
                        text="‚úì Raccourcis Bureau VELBO/VELSRV",
                        variable=serveur_vars['shortcuts']).pack(anchor="w",
                                                                 padx=8,
                                                                 pady=1)

        # Option 2: Autoriser Veloce Backoffice dans pare-feu (PAS coch√©e par d√©faut)
        serveur_vars['allow_veloce_firewall'] = tk.BooleanVar(value=False)
        ctk.CTkCheckBox(serv_frame,
                        text="‚úì Veloce dans pare-feu",
                        variable=serveur_vars['allow_veloce_firewall']).pack(anchor="w",
                                                                             padx=8,
                                                                             pady=1)

        # Statut du dossier c:\veloce (affichage am√©lior√©)
        veloce_exists, veloce_shared = self._check_veloce_share_status()

        status_frame = ctk.CTkFrame(serv_frame, fg_color="transparent")
        status_frame.pack(anchor="w", padx=8, pady=(6, 2))

        ctk.CTkLabel(status_frame,
                     text="üìÅ Dossier c:\\veloce:",
                     font=ctk.CTkFont(size=10, weight="bold"),
                     text_color="#fbbf24").pack(anchor="w")

        if veloce_exists:
            if veloce_shared:
                status_detail = "  ‚úÖ Existe  |  ‚úÖ Partag√©"
                color = "#10b981"
            else:
                status_detail = "  ‚úÖ Existe  |  ‚ùå Non partag√©"
                color = "#f59e0b"
        else:
            status_detail = "  ‚ùå N'existe pas"
            color = "#ef4444"

        ctk.CTkLabel(status_frame,
                     text=status_detail,
                     font=ctk.CTkFont(size=9),
                     text_color=color).pack(anchor="w")

        ctk.CTkCheckBox(serv_frame,
                        text="‚úì Partager c:\\veloce (Everyone - Contr√¥le total)",
                        variable=serveur_vars['share']).pack(anchor="w",
                                                             padx=8,
                                                             pady=(1, 6))

        # Options
        opt_frame = ctk.CTkFrame(col2, fg_color="#2b2b2b")
        opt_frame.pack(fill="x")

        ctk.CTkLabel(opt_frame,
                     text="‚öôÔ∏è Options",
                     font=ctk.CTkFont(size=12,
                                      weight="bold")).pack(pady=(6, 4))

        #ctk.CTkLabel(opt_frame, 
        #             text=f"üñ•Ô∏è Nom PC actuel : {current_pc_name}",
        #             font=ctk.CTkFont(size=10),
        #             text_color="#a5d6ff").pack(anchor="w", padx=8, pady=(2,4))

        ctk.CTkCheckBox(opt_frame, text="Renommer PC:",
                        variable=rename_var).pack(anchor="w", padx=8, pady=1)
        ctk.CTkEntry(opt_frame,
                     textvariable=pc_name_var,
                     placeholder_text="Nom",
                     width=140,
                     height=24).pack(anchor="w", padx=8, pady=1)

        ctk.CTkCheckBox(opt_frame,
                        text="Red√©marrer auto",
                        variable=restart_var).pack(anchor="w",
                                                   padx=8,
                                                   pady=(2, 6))

        # === COLONNE 3: PROGRESSION / LOG ===
        col3 = ctk.CTkFrame(content_frame)
        col3.grid(row=0, column=2, sticky="nsew", padx=(3, 0))

        ctk.CTkLabel(col3,
                     text="üìä Progression",
                     font=ctk.CTkFont(size=11,
                                      weight="bold")).pack(pady=(6, 2))

        status_label_prog = ctk.CTkLabel(col3,
                                         text="Pr√™t...",
                                         font=ctk.CTkFont(size=10))
        status_label_prog.pack(pady=1)

        progress_bar = ctk.CTkProgressBar(col3, width=250)
        progress_bar.pack(pady=3)
        progress_bar.set(0)

        log_box = ctk.CTkTextbox(col3, width=250)
        log_box.pack(fill="both", expand=True, padx=6, pady=3)

        # Fonction pour ex√©cuter
        def execute():

            def log_msg(msg):
                log_box.insert("end", msg + "\n")
                log_box.see("end")
                self.log(msg)

            def worker():
                try:
                    log_msg("===== AUTO SETUP: CONFIG PC =====")

                    # Collecter les √©tapes Standard
                    steps = []
                    if standard_vars['taskbar'].get():
                        steps.append(("Tweak barre des t√¢ches",
                                      lambda: tweak_taskbar(self.log)))
                    if standard_vars['notifications'].get():
                        steps.append(
                            ("D√©sactivation notifications",
                             lambda: disable_windows_notifications(self.log)))
                    if standard_vars['user_admin'].get():
                        steps.append(
                            ("Cr√©ation utilisateur 'admin'",
                             lambda: add_windows_user("admin", "veloce123",
                                                      True, True, self.log)))
                    if standard_vars['user_kpitech'].get():
                        steps.append(
                            ("Cr√©ation utilisateur 'kpitech'",
                             lambda: add_windows_user("kpitech", "Log1tech",
                                                      True, True, self.log)))
                    if standard_vars['wallpaper'].get():
                        steps.append(
                            ("Application wallpaper KPI", lambda:
                             apply_wallpaper("wallpaper-kpi.jpg", self.log)))

                    # === NOUVELLES OPTIONS 1-8 ===

                    # Option 1: D√©sactiver UAC
                    if standard_vars['disable_uac'].get():
                        steps.append(
                            ("D√©sactivation UAC", lambda: self._disable_uac(log_msg)))


                    # Option 3: D√©sactiver veille cartes r√©seau
                    if standard_vars['disable_network_sleep'].get():
                        steps.append(
                            ("D√©sactivation veille r√©seau", lambda: self._disable_network_sleep(log_msg)))

                    # Option 3b: Mettre carte r√©seau en mode Priv√©
                    if standard_vars['network_private'].get():
                        steps.append(
                            ("Carte r√©seau en mode Priv√©", lambda: self._set_network_private(log_msg)))

                    # Option 4: Fuseau horaire + sync
                    if standard_vars['timezone_sync'].get():
                        steps.append(
                            ("Fuseau horaire + sync", lambda: self._set_timezone_and_sync(log_msg)))

                    # Option 5: Meilleures performances
                    if standard_vars['best_performance'].get():
                        steps.append(
                            ("Meilleures performances", lambda: self._set_best_performance(log_msg)))

                    # Option 6: Mode alimentation performance
                    if standard_vars['power_options'].get():
                        steps.append(
                            ("Mode alimentation performance", lambda: self._set_power_performance(log_msg)))

                    # Gestion partage prot√©g√© par mot de passe (Option 7)
                    # V√©rifier si la checkbox est coch√©e
                    if standard_vars['enable_password_sharing_config'].get():
                        pw_action = standard_vars['password_sharing_action'].get()
                        if pw_action == "Activer protection":
                            steps.append(
                                ("Activation partage prot√©g√©", lambda: self.
                                 _enable_password_protected_sharing(log_msg)))
                        elif pw_action == "D√©sactiver protection":
                            steps.append(
                                ("D√©sactivation partage prot√©g√©", lambda: self.
                                 _disable_password_protected_sharing(log_msg)))

                    # Option 8: Heures actives
                    if standard_vars['active_hours'].get():
                        start_h = standard_vars['active_hours_start'].get()
                        end_h = standard_vars['active_hours_end'].get()
                        steps.append(
                            ("Configuration heures actives", 
                             lambda sh=start_h, eh=end_h: self._set_active_hours(log_msg, sh, eh)))

                    # Option 9: Installation Ninite
                    if standard_vars['install_ninite'].get():
                        steps.append(
                            ("Installation Ninite + config VNC", lambda: self._install_ninite(log_msg)))

                    # Option 10: R√©tablir menu contextuel classique
                    if standard_vars['restore_context_menu'].get():
                        steps.append(
                            ("R√©tablir menu contextuel classique", lambda: restore_context_menu(log_msg)))

                    # Collecter les √©tapes Serveur
                    if serveur_vars['shortcuts'].get():
                        steps.append(
                            ("Raccourcis VELBO/VELSRV",
                             lambda: self._create_serveur_shortcuts(log_msg)))
                    if serveur_vars['share'].get():
                        steps.append(
                            ("Partage c:\\veloce",
                             lambda: self._share_veloce_folder(log_msg)))

                    # Option 2: Pare-feu Veloce (dans serveur_vars)
                    if serveur_vars['allow_veloce_firewall'].get():
                        steps.append(
                            ("Configuration pare-feu Veloce", lambda: self._allow_veloce_firewall(log_msg)))

                    if not steps:
                        log_msg("‚ö†Ô∏è Aucune √©tape s√©lectionn√©e")
                        status_label_prog.configure(
                            text="‚ö†Ô∏è Aucune √©tape s√©lectionn√©e")
                        return

                    total = len(steps)

                    # Ex√©cuter
                    for i, (name, action) in enumerate(steps, 1):
                        status_label_prog.configure(
                            text=f"‚ñ∂ √âtape {i}/{total}: {name}...")
                        log_msg(f"‚ñ∂ √âtape {i}/{total}: {name}...")
                        try:
                            action()
                            log_msg("‚úÖ Termin√©")
                        except Exception as e:
                            log_msg(f"‚ùå Erreur: {e}")
                        progress_bar.set(i / total)
                        time.sleep(0.5)

                    # Renommer PC
                    if rename_var.get():
                        new_name = pc_name_var.get().strip()
                        if new_name:
                            status_label_prog.configure(
                                text="‚ñ∂ Renommage du PC...")
                            log_msg(f"‚ñ∂ Renommage du PC en '{new_name}'...")
                            try:
                                rename_computer(new_name, self.log)
                                log_msg("‚úÖ PC renomm√©")
                            except Exception as e:
                                log_msg(f"‚ùå Erreur renommage: {e}")

                    status_label_prog.configure(
                        text="‚úÖ Configuration termin√©e!")
                    log_msg("=" * 50)
                    log_msg("‚úÖ AUTO SETUP CONFIG PC TERMIN√â!")

                    # Red√©marrage
                    if restart_var.get() and rename_var.get(
                    ) and pc_name_var.get().strip():
                        log_msg("üîÑ Red√©marrage dans 10 secondes...")
                        subprocess.run("shutdown /r /t 10", shell=True)

                except Exception as e:
                    log_msg(f"‚ùå Erreur fatale: {e}")
                    status_label_prog.configure(text="‚ùå Erreur")

            log_box.delete("1.0", "end")
            progress_bar.set(0)
            threading.Thread(target=worker, daemon=True).start()

        # Bouton d√©marrer
        ctk.CTkButton(main_frame,
                      text="üöÄ D√©marrer la configuration",
                      width=350,
                      height=40,
                      font=ctk.CTkFont(size=13, weight="bold"),
                      fg_color="#16a34a",
                      hover_color="#15803d",
                      command=execute).pack(pady=10)

    def _create_serveur_shortcuts(self, log_fn):
        """Cr√©e les raccourcis VELBO/VELSRV et copie VELSRV au d√©marrage"""
        veloce_path = r"c:\veloce"

        if not os.path.exists(veloce_path):
            log_fn(f"‚ùå Le dossier {veloce_path} n'existe pas")
            return

        try:
            desktop = os.path.join(os.path.expanduser("~"), "Desktop")
            startup = os.path.join(os.path.expanduser("~"), "AppData",
                                   "Roaming", "Microsoft", "Windows",
                                   "Start Menu", "Programs", "Startup")

            ps_script = f'''
[System.Threading.Thread]::CurrentThread.ApartmentState = [System.Threading.ApartmentState]::STA
$WshShell = New-Object -comObject WScript.Shell

# VELBO sur le bureau
$Shortcut1 = $WshShell.CreateShortcut("{os.path.join(desktop, 'VELBO.lnk')}")
$Shortcut1.TargetPath = "{os.path.join(veloce_path, 'velbo.exe')}"
$Shortcut1.WorkingDirectory = "{veloce_path}"
$Shortcut1.Save()

# VELSRV sur le bureau (avec 2e ic√¥ne)
$Shortcut2 = $WshShell.CreateShortcut("{os.path.join(desktop, 'VELSRV.lnk')}")
$Shortcut2.TargetPath = "{os.path.join(veloce_path, 'velsrv.exe')}"
$Shortcut2.WorkingDirectory = "{veloce_path}"
$Shortcut2.IconLocation = "{os.path.join(veloce_path, 'velsrv.exe')},1"
$Shortcut2.Save()

# VELSRV au d√©marrage
$Shortcut3 = $WshShell.CreateShortcut("{os.path.join(startup, 'VELSRV.lnk')}")
$Shortcut3.TargetPath = "{os.path.join(veloce_path, 'velsrv.exe')}"
$Shortcut3.WorkingDirectory = "{veloce_path}"
$Shortcut3.IconLocation = "{os.path.join(veloce_path, 'velsrv.exe')},1"
$Shortcut3.Save()
'''

            subprocess.run(["powershell", "-Command", ps_script],
                           capture_output=True,
                           text=True,
                           check=True)

            log_fn("‚úÖ VELBO.lnk cr√©√© sur le Bureau")
            log_fn("‚úÖ VELSRV.lnk cr√©√© sur le Bureau")
            log_fn("‚úÖ VELSRV.lnk copi√© au D√©marrage")

        except Exception as e:
            log_fn(f"‚ùå Erreur cr√©ation raccourcis: {e}")

    def _share_veloce_folder(self, log_fn):
        """Partage le dossier c:\\veloce avec Everyone (acc√®s int√©gral)"""
        veloce_path = r"c:\veloce"

        # Cr√©er le dossier s'il n'existe pas
        if not os.path.exists(veloce_path):
            log_fn(f"‚ñ∂ Cr√©ation du dossier {veloce_path}...")
            try:
                os.makedirs(veloce_path, exist_ok=True)
                log_fn(f"‚úÖ Dossier cr√©√©: {veloce_path}")
            except Exception as e:
                log_fn(f"‚ùå Impossible de cr√©er le dossier: {e}")
                return

        try:
            # √âTAPE 1: D√©finir les permissions NTFS pour Everyone (Contr√¥le total)
            log_fn("‚ñ∂ Configuration des permissions NTFS pour Everyone...")
            ntfs_cmd = f'icacls "{veloce_path}" /grant Everyone:(OI)(CI)F /T /C /Q'

            result_ntfs = subprocess.run(ntfs_cmd,
                                         shell=True,
                                         capture_output=True,
                                         text=True)
            if result_ntfs.returncode == 0:
                log_fn("‚úÖ Permissions NTFS: Everyone = Contr√¥le total")
            else:
                log_fn(f"‚ö†Ô∏è Avertissement NTFS: {result_ntfs.stderr}")

            # √âTAPE 2: Supprimer le partage r√©seau existant si pr√©sent
            subprocess.run('net share veloce /delete',
                           shell=True,
                           capture_output=True)

            # √âTAPE 3: Cr√©er le nouveau partage r√©seau avec Everyone Full
            log_fn("‚ñ∂ Cr√©ation du partage r√©seau...")
            share_cmd = f'net share veloce={veloce_path} /grant:everyone,full'

            result_share = subprocess.run(share_cmd,
                                          shell=True,
                                          capture_output=True,
                                          text=True,
                                          check=True)

            log_fn("‚úÖ Partage r√©seau cr√©√©: \\\\<PC>\\veloce")
            log_fn("‚úÖ Permissions partage: Everyone = Contr√¥le total")
            log_fn("‚úÖ Dossier c:\\veloce partag√© avec succ√®s")

        except subprocess.CalledProcessError as e:
            log_fn(f"‚ùå Erreur lors du partage r√©seau: {e.stderr}")
        except Exception as e:
            log_fn(f"‚ùå Erreur partage dossier: {e}")

    def _open_veloce_window(self):
        """Ouvre la fen√™tre Station Veloce avec les 2 champs visibles"""
        from tkinter import Toplevel

        window = Toplevel(self)
        window.title("Auto Setup - Station Veloce")
        window.geometry("900x650")
        window.resizable(True, True)
        window.transient(self)
        window.grab_set()

        # Frame principal
        main_frame = ctk.CTkFrame(window)
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)

        # Titre
        ctk.CTkLabel(main_frame,
                     text="üí≥ Configuration Station Veloce",
                     font=ctk.CTkFont(size=16,
                                      weight="bold")).pack(pady=(0, 10))

        server_var = tk.StringVar(value="SV")
        station_var = tk.StringVar(value="")

        # Container horizontal: Param√®tres GAUCHE | Log DROITE
        content_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, pady=(0, 8))

        # === GAUCHE: Param√®tres ===
        left_frame = ctk.CTkFrame(content_frame, fg_color="#2b2b2b")
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 6))

        ctk.CTkLabel(left_frame,
                     text="üí≥ √âtapes de configuration :",
                     font=ctk.CTkFont(size=14,
                                      weight="bold")).pack(anchor="w",
                                                           padx=10,
                                                           pady=(8, 4))

        desc_text = """‚úì V√©rification acc√®s r√©seau
‚úì Installation install (WSXX).exe
‚úì Raccourci bureau
‚úì Cl√© registre + D√©marrage"""
        ctk.CTkLabel(left_frame,
                     text=desc_text,
                     justify="left",
                     font=ctk.CTkFont(size=12)).pack(anchor="w",
                                                     padx=12,
                                                     pady=(0, 8))

        ctk.CTkLabel(left_frame,
                     text="‚öôÔ∏è Param√®tres :",
                     font=ctk.CTkFont(size=14,
                                      weight="bold")).pack(anchor="w",
                                                           padx=10,
                                                           pady=(4, 4))

        # Serveur
        ctk.CTkLabel(left_frame,
                     text="Nom du serveur:",
                     font=ctk.CTkFont(size=12)).pack(anchor="w",
                                                     padx=12,
                                                     pady=(4, 2))
        ctk.CTkEntry(left_frame,
                     textvariable=server_var,
                     width=220,
                     height=26,
                     placeholder_text="Ex: SV",
                     font=ctk.CTkFont(size=12)).pack(anchor="w",
                                                     padx=12,
                                                     pady=2)

        # Station
        ctk.CTkLabel(left_frame,
                     text="Num√©ro de station:",
                     font=ctk.CTkFont(size=12)).pack(anchor="w",
                                                     padx=12,
                                                     pady=(6, 2))
        ctk.CTkEntry(left_frame,
                     textvariable=station_var,
                     width=220,
                     height=26,
                     placeholder_text="Ex: 1, 2, 15...",
                     font=ctk.CTkFont(size=12)).pack(anchor="w",
                                                     padx=12,
                                                     pady=2)

        # Info chemin
        ctk.CTkLabel(left_frame,
                     text="‚ÑπÔ∏è \\\\[SERVEUR]\\veloce\\stat[XX]\\install\\",
                     font=ctk.CTkFont(size=12),
                     text_color="#a5d6ff").pack(anchor="w",
                                                padx=12,
                                                pady=(8, 8))

        # === DROITE: Progression ===
        right_frame = ctk.CTkFrame(content_frame)
        right_frame.pack(side="right", fill="both", expand=True)

        ctk.CTkLabel(right_frame,
                     text="üìä Progression",
                     font=ctk.CTkFont(size=14,
                                      weight="bold")).pack(pady=(8, 4))

        status_label = ctk.CTkLabel(right_frame,
                                    text="Pr√™t √† d√©marrer...",
                                    font=ctk.CTkFont(size=12))
        status_label.pack(pady=2)

        progress_bar = ctk.CTkProgressBar(right_frame, width=280)
        progress_bar.pack(pady=3)
        progress_bar.set(0)

        log_box = ctk.CTkTextbox(right_frame, width=300)
        log_box.pack(fill="both", expand=True, padx=6, pady=6)

        # Fonction ex√©cution
        def execute():
            server = server_var.get().strip()
            station = station_var.get().strip()

            if not server:
                messagebox.showerror("Erreur",
                                     "Veuillez entrer le nom du serveur",
                                     parent=window)
                return

            if not station or not station.isdigit():
                messagebox.showerror(
                    "Erreur",
                    "Veuillez entrer un num√©ro de station valide (1-99)",
                    parent=window)
                return

            station_num = int(station)
            if station_num < 1 or station_num > 99:
                messagebox.showerror(
                    "Erreur",
                    "Le num√©ro de station doit √™tre entre 1 et 99",
                    parent=window)
                return

            # Lancer la configuration
            log_box.delete("1.0", "end")
            progress_bar.set(0)
            self._run_auto_setup_veloce_inline(window, server, station_num,
                                               status_label, progress_bar,
                                               log_box)

        # Bouton d√©marrer
        ctk.CTkButton(main_frame,
                      text="üöÄ D√©marrer l'installation",
                      width=350,
                      height=42,
                      font=ctk.CTkFont(size=13, weight="bold"),
                      fg_color="#2563eb",
                      hover_color="#1d4ed8",
                      command=execute).pack(pady=6)

    def _run_auto_setup_veloce_inline(self, window, server, station_num,
                                      status_label, progress_bar, log_box):
        """Ex√©cute Station Veloce dans la fen√™tre (pas de popup)"""

        def log_msg(msg):
            log_box.insert("end", msg + "\n")
            log_box.see("end")
            self.log(msg)

        def worker():
            try:
                log_msg(f"===== AUTO SETUP: STATION VELOCE =====")

                # Format station
                station_formatted = f"{station_num:02d}"
                station_no_zero = str(station_num)

                log_msg(f"Serveur: {server}")
                log_msg(
                    f"Num√©ro de station: {station_num} (format√©: {station_formatted})"
                )
                progress_bar.set(0.1)

                # Chemins
                veloce_base = f"\\\\{server}\\veloce"
                station_folder = f"stat{station_formatted}"
                station_path = os.path.join(veloce_base, station_folder,
                                            "install")
                install_exe = os.path.join(
                    station_path, f"install (WS{station_formatted}).exe")
                ws_starter = os.path.join(station_path,
                                          f"WS Starter{station_no_zero}.exe")
                desktop = os.path.join(os.path.expanduser("~"), "Desktop")
                appdata = os.getenv("APPDATA") or os.path.expanduser("~")
                startup_folder = os.path.join(appdata, "Microsoft", "Windows",
                                              "Start Menu", "Programs",
                                              "Startup")

                # √âtape 1: Ping serveur
                status_label.configure(text="V√©rification acc√®s r√©seau...")
                log_msg(f"‚ñ∂ V√©rification acc√®s √† {veloce_base}...")

                ping_result = subprocess.run(f"ping -n 1 -w 1000 {server}",
                                             shell=True,
                                             capture_output=True,
                                             timeout=2)

                if ping_result.returncode != 0:
                    log_msg(f"‚ùå Serveur {server} non joignable")
                    status_label.configure(text="‚ùå Serveur non joignable")
                    progress_bar.set(1.0)
                    return

                log_msg(f"‚úì Serveur {server} joignable")

                if not os.path.exists(station_path):
                    log_msg(f"‚ùå Dossier {station_folder} introuvable")
                    log_msg(f"Chemin: {station_path}")
                    status_label.configure(
                        text="‚ùå Dossier station introuvable")
                    progress_bar.set(1.0)
                    return

                log_msg(f"‚úì Dossier station accessible: {station_path}")
                progress_bar.set(0.2)

                # √âtape 2: Installer
                status_label.configure(text="Installation de l'application...")
                log_msg(
                    f"‚ñ∂ Lancement de install (WS{station_formatted}).exe en mode admin..."
                )

                if not os.path.exists(install_exe):
                    log_msg(f"‚ùå Fichier introuvable: {install_exe}")
                    status_label.configure(
                        text="‚ùå Fichier install introuvable")
                    progress_bar.set(1.0)
                    return

                import ctypes
                ret = ctypes.windll.shell32.ShellExecuteW(
                    None, "runas", install_exe, None, station_path, 1)

                if ret > 32:
                    log_msg(
                        f"‚úì install (WS{station_formatted}).exe lanc√© avec succ√®s"
                    )
                else:
                    log_msg(f"‚ùå √âchec du lancement (code: {ret})")
                    status_label.configure(text="‚ùå Erreur installation")
                    progress_bar.set(1.0)
                    return

                progress_bar.set(0.4)
                time.sleep(1)

                # √âtape 3: Raccourci bureau
                status_label.configure(text="Cr√©ation du raccourci bureau...")
                log_msg(
                    f"‚ñ∂ Cr√©ation du raccourci 'station {station_no_zero}' sur le bureau..."
                )

                if not os.path.exists(ws_starter):
                    log_msg(f"‚ùå Fichier source introuvable: {ws_starter}")
                    status_label.configure(text="‚ùå WS Starter introuvable")
                    progress_bar.set(1.0)
                    return

                shortcut_path = os.path.join(desktop,
                                             f"station {station_no_zero}.lnk")
                ps_script = f'''
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut("{shortcut_path}")
$Shortcut.TargetPath = "{ws_starter}"
$Shortcut.WorkingDirectory = "{station_path}"
$Shortcut.Save()
'''
                ps_cmd = [
                    'powershell', '-ExecutionPolicy', 'Bypass', '-Command',
                    ps_script
                ]
                result = subprocess.run(ps_cmd, capture_output=True, text=True)

                if result.returncode == 0 and os.path.exists(shortcut_path):
                    log_msg(f"‚úì Raccourci cr√©√©: {shortcut_path}")
                else:
                    log_msg(f"‚ùå Erreur cr√©ation raccourci: {result.stderr}")
                    log_msg("‚ö†Ô∏è Continuez manuellement...")

                progress_bar.set(0.6)

                # √âtape 4: Copier raccourci au d√©marrage (supprimer l'existant d'abord)
                status_label.configure(text="Copie raccourci au d√©marrage...")
                log_msg(f"‚ñ∂ Copie du raccourci dans le dossier D√©marrage...")

                startup_shortcut = os.path.join(
                    startup_folder, f"station {station_no_zero}.lnk")

                # Supprimer l'ancien raccourci s'il existe
                if os.path.exists(startup_shortcut):
                    try:
                        os.remove(startup_shortcut)
                        log_msg(f"‚úì Ancien raccourci supprim√© du d√©marrage")
                    except Exception as e:
                        log_msg(
                            f"‚ö†Ô∏è Impossible de supprimer l'ancien raccourci: {e}"
                        )

                # Cr√©er le nouveau raccourci dans le d√©marrage
                ps_script_startup = f'''
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut("{startup_shortcut}")
$Shortcut.TargetPath = "{ws_starter}"
$Shortcut.WorkingDirectory = "{station_path}"
$Shortcut.Save()
'''
                result_startup = subprocess.run([
                    'powershell', '-ExecutionPolicy', 'Bypass', '-Command',
                    ps_script_startup
                ],
                                                capture_output=True,
                                                text=True)

                if result_startup.returncode == 0 and os.path.exists(
                        startup_shortcut):
                    log_msg(
                        f"‚úì Raccourci copi√© au d√©marrage: {startup_shortcut}")
                else:
                    log_msg(
                        f"‚ùå Erreur copie d√©marrage: {result_startup.stderr}")

                # Supprimer l'ancien "Veloce WS Starter" du d√©marrage (.lnk ET .exe)
                log_msg(f"‚ñ∂ Nettoyage ancien raccourci 'Veloce WS Starter'...")

                deleted_count = 0
                # Chercher variante .lnk
                old_lnk = os.path.join(startup_folder, "Veloce WS Starter.lnk")
                if os.path.exists(old_lnk):
                    try:
                        os.remove(old_lnk)
                        log_msg(f"‚úì 'Veloce WS Starter.lnk' supprim√©")
                        deleted_count += 1
                    except Exception as e:
                        log_msg(f"‚ö†Ô∏è Erreur suppression .lnk: {e}")

                # Chercher variante .exe
                old_exe = os.path.join(startup_folder, "Veloce WS Starter.exe")
                if os.path.exists(old_exe):
                    try:
                        os.remove(old_exe)
                        log_msg(f"‚úì 'Veloce WS Starter.exe' supprim√©")
                        deleted_count += 1
                    except Exception as e:
                        log_msg(f"‚ö†Ô∏è Erreur suppression .exe: {e}")

                if deleted_count == 0:
                    log_msg(f"‚úì Pas d'ancien 'Veloce WS Starter' √† supprimer")

                progress_bar.set(0.8)

                # √âtape 5: Cl√© de registre DirectoryCacheLifetime
                status_label.configure(text="Application cl√© registre...")
                log_msg(
                    f"‚ñ∂ Application de la cl√© registre DirectoryCacheLifetime..."
                )

                try:
                    import winreg
                    key_path = r"SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters"
                    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path,
                                         0, winreg.KEY_SET_VALUE)
                    winreg.SetValueEx(key, "DirectoryCacheLifetime", 0,
                                      winreg.REG_DWORD, 0)
                    winreg.CloseKey(key)
                    log_msg(
                        f"‚úì Cl√© registre DirectoryCacheLifetime d√©finie √† 0")
                except Exception as e:
                    log_msg(f"‚ùå Erreur cl√© registre: {e}")
                    log_msg("‚ö†Ô∏è N√©cessite droits administrateur")

                progress_bar.set(0.9)

                # Termin√©
                status_label.configure(text="‚úÖ Configuration termin√©e!")
                log_msg("=" * 50)
                log_msg("‚úÖ AUTO SETUP STATION VELOCE TERMIN√â!")
                log_msg(f"‚úì Raccourci bureau: 'station {station_no_zero}'")
                log_msg(f"‚úì Raccourci d√©marrage Windows")
                log_msg(f"‚úì Cl√© registre DirectoryCacheLifetime = 0")
                progress_bar.set(1.0)

            except Exception as e:
                log_msg(f"‚ùå Erreur fatale: {e}")
                status_label.configure(text="‚ùå Erreur")

        threading.Thread(target=worker, daemon=True).start()

    def _build_standard_ui(self):
        """Construit l'UI pour Poste Standard"""
        frame = self._auto_config_frame

        # Description
        desc_frame = ctk.CTkFrame(frame, fg_color="#2b2b2b")
        desc_frame.pack(fill="x", padx=15, pady=10)

        ctk.CTkLabel(desc_frame,
                     text="üìã S√©lectionnez les √©tapes √† ex√©cuter :",
                     font=ctk.CTkFont(size=13,
                                      weight="bold")).pack(anchor="w",
                                                           padx=20,
                                                           pady=(15, 10))

        # Checkboxes pour les √©tapes
        if not hasattr(self, '_standard_steps_vars'):
            self._standard_steps_vars = {
                'taskbar': tk.BooleanVar(value=True),
                'notifications': tk.BooleanVar(value=True),
                'user_admin': tk.BooleanVar(value=True),
                'user_kpitech': tk.BooleanVar(value=True),
                'wallpaper': tk.BooleanVar(value=True),
            }
            self._standard_rename_var = tk.BooleanVar(value=False)
            # Utiliser la M√äME variable que la page "Renommer PC" (ligne 82-83)
            # Pas besoin de cr√©er _standard_pc_name_var, on utilise self.pc_name_var
            self._standard_restart_var = tk.BooleanVar(value=False)

        checks_frame = ctk.CTkFrame(desc_frame, fg_color="transparent")
        checks_frame.pack(fill="x", padx=20, pady=(0, 15))

        ctk.CTkCheckBox(checks_frame,
                        text="‚úì Tweak barre des t√¢ches",
                        variable=self._standard_steps_vars['taskbar']).pack(
                            anchor="w", pady=3)
        ctk.CTkCheckBox(
            checks_frame,
            text="‚úì D√©sactiver notifications Windows",
            variable=self._standard_steps_vars['notifications']).pack(
                anchor="w", pady=3)
        ctk.CTkCheckBox(checks_frame,
                        text="‚úì Cr√©er utilisateur 'admin' (veloce123)",
                        variable=self._standard_steps_vars['user_admin']).pack(
                            anchor="w", pady=3)
        ctk.CTkCheckBox(
            checks_frame,
            text="‚úì Cr√©er utilisateur 'kpitech' (Log1tech)",
            variable=self._standard_steps_vars['user_kpitech']).pack(
                anchor="w", pady=3)
        ctk.CTkCheckBox(checks_frame,
                        text="‚úì Appliquer wallpaper KPI",
                        variable=self._standard_steps_vars['wallpaper']).pack(
                            anchor="w", pady=3)

        # Options suppl√©mentaires
        options_frame = ctk.CTkFrame(frame)
        options_frame.pack(fill="x", padx=15, pady=10)

        ctk.CTkLabel(options_frame,
                     text="‚öôÔ∏è Options suppl√©mentaires :",
                     font=ctk.CTkFont(size=13,
                                      weight="bold")).pack(anchor="w",
                                                           padx=20,
                                                           pady=(15, 10))

        # Renommer PC
        rename_frame = ctk.CTkFrame(options_frame, fg_color="transparent")
        rename_frame.pack(fill="x", padx=20, pady=5)

        ctk.CTkCheckBox(rename_frame,
                        text="Renommer le PC :",
                        variable=self._standard_rename_var).pack(side="left")

        # FORCER le nom actuel du PC dans le champ imm√©diatement
        current_pc_name = os.environ.get("COMPUTERNAME", "")
        if not self.pc_name_var.get() or self.pc_name_var.get() != current_pc_name:
            self.pc_name_var.set(current_pc_name)

        pc_entry = ctk.CTkEntry(rename_frame, width=250)
        pc_entry.insert(0, current_pc_name)  # Forcer l'affichage direct
        pc_entry.pack(side="left", padx=10)

        # Synchroniser avec self.pc_name_var pour la suite
        def sync_pc_name(*args):
            self.pc_name_var.set(pc_entry.get())
        pc_entry.bind('<KeyRelease>', sync_pc_name)

        # Label avec le nom actuel
       # ctk.CTkLabel(rename_frame, 
       #              text=f"(Actuel: {current_pc_name})",
       #              text_color="#9ca3af",
       #              font=ctk.CTkFont(size=11)).pack(side="left", padx=5)

        # Red√©marrage
        ctk.CTkCheckBox(options_frame,
                        text="Red√©marrer automatiquement apr√®s configuration",
                        variable=self._standard_restart_var).pack(anchor="w",
                                                                  padx=20,
                                                                  pady=(10,
                                                                        15))

        # Zone de progression
        self._standard_progress_frame = ctk.CTkFrame(frame)
        self._standard_progress_frame.pack(fill="both",
                                           expand=True,
                                           padx=15,
                                           pady=10)

        self._standard_status_label = ctk.CTkLabel(
            self._standard_progress_frame,
            text="Pr√™t √† d√©marrer...",
            font=ctk.CTkFont(size=12))
        self._standard_status_label.pack(pady=10)

        self._standard_progress_bar = ctk.CTkProgressBar(
            self._standard_progress_frame, width=400)
        self._standard_progress_bar.pack(pady=10)
        self._standard_progress_bar.set(0)

        self._standard_log_box = ctk.CTkTextbox(self._standard_progress_frame,
                                                height=150)
        self._standard_log_box.pack(fill="both", expand=True, padx=10, pady=10)

        # Bouton d√©marrer
        ctk.CTkButton(frame,
                      text="üöÄ D√©marrer la configuration",
                      width=300,
                      height=45,
                      font=ctk.CTkFont(size=14, weight="bold"),
                      fg_color="#16a34a",
                      hover_color="#15803d",
                      command=self._start_standard_setup).pack(pady=20)

    def _start_standard_setup(self):
        """D√©marre la configuration Standard (inline, sans popup)"""

        def log_inline(msg):
            """Ajoute un message au log inline"""
            self._standard_log_box.insert("end", msg + "\n")
            self._standard_log_box.see("end")
            self.log(msg)

        def worker():
            try:
                log_inline("===== AUTO SETUP: POSTE STANDARD =====")

                # Collecter les √©tapes √† ex√©cuter
                steps = []
                if self._standard_steps_vars['taskbar'].get():
                    steps.append(("Tweak barre des t√¢ches",
                                  lambda: tweak_taskbar(self.log)))
                if self._standard_steps_vars['notifications'].get():
                    steps.append(
                        ("D√©sactivation notifications",
                         lambda: disable_windows_notifications(self.log)))
                if self._standard_steps_vars['user_admin'].get():
                    steps.append(
                        ("Cr√©ation utilisateur 'admin'",
                         lambda: add_windows_user("admin", "veloce123", True,
                                                  True, self.log)))
                if self._standard_steps_vars['user_kpitech'].get():
                    steps.append(
                        ("Cr√©ation utilisateur 'kpitech'",
                         lambda: add_windows_user("kpitech", "Log1tech", True,
                                                  True, self.log)))
                if self._standard_steps_vars['wallpaper'].get():
                    steps.append(
                        ("Application wallpaper KPI",
                         lambda: apply_wallpaper("wallpaper-kpi.jpg", self.log)
                         ))

                if not steps:
                    log_inline("‚ö†Ô∏è Aucune √©tape s√©lectionn√©e")
                    self._standard_status_label.configure(
                        text="‚ö†Ô∏è Aucune √©tape s√©lectionn√©e")
                    return

                total = len(steps)

                # Ex√©cuter les √©tapes
                for i, (name, action) in enumerate(steps, 1):
                    self._standard_status_label.configure(
                        text=f"‚ñ∂ √âtape {i}/{total}: {name}...")
                    log_inline(f"‚ñ∂ √âtape {i}/{total}: {name}...")

                    try:
                        action()
                        log_inline("‚úÖ Termin√©")
                    except Exception as e:
                        log_inline(f"‚ùå Erreur: {e}")

                    self._standard_progress_bar.set(i / total)
                    time.sleep(0.5)

                # Renommer le PC si demand√©
                if self._standard_rename_var.get():
                    new_name = self.pc_name_var.get().strip()
                    if new_name:
                        self._standard_status_label.configure(
                            text="‚ñ∂ Renommage du PC...")
                        log_inline(f"‚ñ∂ Renommage du PC en '{new_name}'...")
                        try:
                            rename_computer(new_name, self.log)
                            log_inline("‚úÖ PC renomm√© avec succ√®s")
                        except Exception as e:
                            log_inline(f"‚ùå Erreur renommage: {e}")
                    else:
                        log_inline(
                            "‚ö†Ô∏è Renommage demand√© mais aucun nom fourni")

                self._standard_status_label.configure(
                    text="‚úÖ Configuration termin√©e!")
                log_inline("=" * 50)
                log_inline("‚úÖ AUTO SETUP POSTE STANDARD TERMIN√â!")

                # Red√©marrage si demand√©
                if self._standard_restart_var.get():
                    if self._standard_rename_var.get(
                    ) and self.pc_name_var.get().strip():
                        log_inline(
                            "üîÑ Red√©marrage du syst√®me dans 10 secondes...")
                        subprocess.run("shutdown /r /t 10", shell=True)
                        log_inline("‚úÖ Red√©marrage planifi√©")

            except Exception as e:
                log_inline(f"‚ùå Erreur fatale: {e}")
                self._standard_status_label.configure(text="‚ùå Erreur")

        # R√©initialiser l'UI
        self._standard_log_box.delete("1.0", "end")
        self._standard_progress_bar.set(0)

        # Lancer en thread
        threading.Thread(target=worker, daemon=True).start()

    def _build_serveur_ui(self):
        """Construit l'UI pour Poste Serveur"""
        frame = self._auto_config_frame

        info_frame = ctk.CTkFrame(frame, fg_color="#3a3a3a")
        info_frame.pack(fill="both", expand=True, padx=15, pady=15)

        ctk.CTkLabel(info_frame,
                     text="‚ö†Ô∏è Configuration en attente",
                     font=ctk.CTkFont(size=16, weight="bold"),
                     text_color="#fbbf24").pack(pady=(30, 10))

        ctk.CTkLabel(
            info_frame,
            text=
            "La configuration automatique pour Poste Serveur\nest en cours de d√©finition.",
            font=ctk.CTkFont(size=12),
            justify="center").pack(pady=(0, 30))

    def _build_veloce_ui(self):
        """Construit l'UI pour Station Veloce"""
        frame = self._auto_config_frame

        # Description
        desc_frame = ctk.CTkFrame(frame, fg_color="#2b2b2b")
        desc_frame.pack(fill="x", padx=15, pady=10)

        desc_text = """üí≥ Configuration Station Veloce :

‚úì V√©rification acc√®s r√©seau au serveur
‚úì Installation de install (WSXX).exe en mode admin
‚úì Cr√©ation raccourci bureau "station X"
‚úì Application cl√© registre DirectoryCacheLifetime
‚úì Copie dans D√©marrage Windows
‚úì Suppression ancien raccourci Veloce"""

        ctk.CTkLabel(desc_frame,
                     text=desc_text,
                     justify="left",
                     font=ctk.CTkFont(size=11)).pack(padx=20, pady=15)

        # Champs de saisie
        if not hasattr(self, '_veloce_server_var'):
            self._veloce_server_var = tk.StringVar(value="")
            self._veloce_station_var = tk.StringVar(value="")

        fields_frame = ctk.CTkFrame(frame)
        fields_frame.pack(fill="x", padx=15, pady=10)

        # Nom du serveur
        row1 = ctk.CTkFrame(fields_frame, fg_color="transparent")
        row1.pack(fill="x", pady=8)
        ctk.CTkLabel(row1,
                     text="Nom du serveur:",
                     width=150,
                     anchor="w",
                     font=ctk.CTkFont(size=12)).pack(side="left", padx=10)
        ctk.CTkEntry(row1,
                     textvariable=self._veloce_server_var,
                     width=300,
                     placeholder_text="Ex: SV",
                     font=ctk.CTkFont(size=12)).pack(side="left", padx=10)

        # Num√©ro de station
        row2 = ctk.CTkFrame(fields_frame, fg_color="transparent")
        row2.pack(fill="x", pady=8)
        ctk.CTkLabel(row2,
                     text="Num√©ro de station:",
                     width=150,
                     anchor="w",
                     font=ctk.CTkFont(size=12)).pack(side="left", padx=10)
        ctk.CTkEntry(row2,
                     textvariable=self._veloce_station_var,
                     width=300,
                     placeholder_text="Ex: 1, 2, 15...",
                     font=ctk.CTkFont(size=12)).pack(side="left", padx=10)

        # Info chemin
        info_frame = ctk.CTkFrame(frame, fg_color="#3a3a3a")
        info_frame.pack(fill="x", padx=15, pady=10)

        ctk.CTkLabel(
            info_frame,
            text=
            "‚ÑπÔ∏è Le chemin utilis√© sera: \\\\[SERVEUR]\\veloce\\stat[XX]\\install\\",
            font=ctk.CTkFont(size=10),
            text_color="#a5d6ff").pack(padx=15, pady=10)

        # Bouton d√©marrer
        ctk.CTkButton(frame,
                      text="üöÄ D√©marrer l'installation",
                      width=300,
                      height=45,
                      font=ctk.CTkFont(size=14, weight="bold"),
                      fg_color="#2563eb",
                      hover_color="#1d4ed8",
                      command=self._start_veloce_setup).pack(pady=20)

    def _start_veloce_setup(self):
        """D√©marre la configuration Station Veloce"""
        server = self._veloce_server_var.get().strip()
        station = self._veloce_station_var.get().strip()

        if not server:
            messagebox.showerror("Erreur", "Veuillez entrer le nom du serveur")
            return

        if not station or not station.isdigit():
            messagebox.showerror(
                "Erreur", "Veuillez entrer un num√©ro de station valide (1-99)")
            return

        station_num = int(station)
        if station_num < 1 or station_num > 99:
            messagebox.showerror(
                "Erreur", "Le num√©ro de station doit √™tre entre 1 et 99")
            return

        # Lancer la configuration avec les param√®tres
        self._run_auto_setup("veloce",
                             server_name=server,
                             station_number=station_num)

    def _run_auto_setup(self,
                        setup_type,
                        server_name=None,
                        station_number=None):
        """Ex√©cute la configuration automatique selon le type avec dialogue step-by-step"""
        from tkinter import Toplevel, messagebox

        # Fen√™tre de dialogue
        dialog = Toplevel(self)
        dialog.title(f"Auto Setup - {setup_type.upper()}")
        dialog.geometry("750x650")
        dialog.resizable(False, False)
        dialog.transient(self)
        dialog.grab_set()

        # Frame principal
        main_frame = ctk.CTkFrame(dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Titre
        ctk.CTkLabel(main_frame,
                     text=f"Configuration {setup_type.upper()}",
                     font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)

        # Label pour l'√©tape courante
        step_label = ctk.CTkLabel(main_frame,
                                  text="Pr√™t √† d√©marrer...",
                                  font=ctk.CTkFont(size=13))
        step_label.pack(pady=10)

        # Barre de progression
        progress_bar = ctk.CTkProgressBar(main_frame, width=400)
        progress_bar.pack(pady=10)
        progress_bar.set(0)

        # Log frame
        log_frame = ctk.CTkTextbox(main_frame, width=550, height=200)
        log_frame.pack(pady=10, fill="both", expand=True)

        def log_to_dialog(msg):
            """Ajoute un message au log de la fen√™tre"""
            log_frame.insert("end", msg + "\n")
            log_frame.see("end")
            self.log(msg)

        def run_worker(server_name=None, station_number=None):
            """Ex√©cute les √©tapes de configuration"""
            log_to_dialog(f"===== AUTO SETUP: {setup_type.upper()} =====")

            if setup_type == "standard":
                steps = [
                    ("Tweak barre des t√¢ches",
                     lambda: tweak_taskbar(self.log)),
                    ("D√©sactivation notifications",
                     lambda: disable_windows_notifications(self.log)),
                    ("Cr√©ation utilisateur 'admin'", lambda: add_windows_user(
                        "admin", "veloce123", True, True, self.log)),
                    ("Cr√©ation utilisateur 'kpitech'",
                     lambda: add_windows_user("kpitech", "Log1tech", True,
                                              True, self.log)),
                    ("Application wallpaper KPI",
                     lambda: apply_wallpaper("wallpaper-kpi.jpg", self.log))
                ]

                pc_renamed = False
                total = len(steps)
                for i, (name, action) in enumerate(steps, 1):
                    # Demander confirmation
                    dialog.update()
                    result = messagebox.askyesno(
                        "Confirmation",
                        f"√âtape {i}/{total}: {name}\n\nEx√©cuter cette √©tape ?",
                        parent=dialog)

                    if result:
                        step_label.configure(
                            text=f"‚ñ∂ √âtape {i}/{total}: {name}...")
                        log_to_dialog(f"‚ñ∂ √âtape {i}/{total}: {name}...")
                        try:
                            action()
                            log_to_dialog("‚úÖ Termin√©")
                        except Exception as e:
                            log_to_dialog(f"‚ùå Erreur: {e}")
                    else:
                        log_to_dialog(f"‚è≠Ô∏è √âtape {i}/{total} ignor√©e: {name}")

                    progress_bar.set(i / total)
                    time.sleep(0.5)

                # √âtape suppl√©mentaire : Renommer le PC ?
                dialog.update()
                if messagebox.askyesno(
                        "Renommer le PC ?",
                        "Voulez-vous renommer ce PC ?\n\n(Un red√©marrage sera n√©cessaire)",
                        parent=dialog):
                    from tkinter import simpledialog
                    new_name = simpledialog.askstring(
                        "Nouveau nom du PC",
                        "Entrez le nouveau nom du PC:",
                        parent=dialog)
                    if new_name and new_name.strip():
                        step_label.configure(text="‚ñ∂ Renommage du PC...")
                        log_to_dialog(
                            f"‚ñ∂ Renommage du PC en '{new_name.strip()}'...")
                        try:
                            rename_computer(new_name.strip(), self.log)
                            log_to_dialog("‚úÖ PC renomm√© avec succ√®s")
                            pc_renamed = True
                        except Exception as e:
                            log_to_dialog(f"‚ùå Erreur renommage: {e}")
                    else:
                        log_to_dialog("‚è≠Ô∏è Renommage annul√©")

                step_label.configure(text="‚úÖ Configuration termin√©e!")
                log_to_dialog("=" * 50)
                log_to_dialog("‚úÖ AUTO SETUP POSTE STANDARD TERMIN√â!")

                # Proposer red√©marrage si PC renomm√©
                if pc_renamed:
                    dialog.update()
                    if messagebox.askyesno(
                            "Red√©marrage requis",
                            "Le PC a √©t√© renomm√©.\n\nVoulez-vous red√©marrer maintenant ?",
                            parent=dialog):
                        log_to_dialog(
                            "üîÑ Red√©marrage du syst√®me dans 10 secondes...")
                        subprocess.run("shutdown /r /t 10", shell=True)
                        log_to_dialog("‚úÖ Red√©marrage planifi√©")
                    else:
                        log_to_dialog(
                            "‚ö†Ô∏è Red√©marrez manuellement pour appliquer le nouveau nom"
                        )

            elif setup_type == "serveur":
                step_label.configure(text="‚ö†Ô∏è Configuration en attente")
                log_to_dialog(
                    "‚ö†Ô∏è Poste Serveur: Configuration en attente de d√©finition")
                log_to_dialog("Aucune action configur√©e pour le moment.")
                progress_bar.set(1.0)

            elif setup_type == "veloce":
                # Utiliser les param√®tres pass√©s
                server = server_name
                station = station_number

                # Formater le num√©ro de station (01, 02, etc.)
                station_formatted = f"{station:02d}"
                station_no_zero = str(station)

                log_to_dialog(f"Serveur: {server}")
                log_to_dialog(
                    f"Num√©ro de station: {station} (format√©: {station_formatted})"
                )
                progress_bar.set(0.1)

                # Chemins
                veloce_base = f"\\\\{server}\\veloce"
                station_folder = f"stat{station_formatted}"
                station_path = os.path.join(veloce_base, station_folder,
                                            "install")
                install_exe = os.path.join(
                    station_path, f"install (WS{station_formatted}).exe")
                ws_starter = os.path.join(station_path,
                                          f"WS Starter{station_no_zero}.exe")
                desktop = os.path.join(os.path.expanduser("~"), "Desktop")
                appdata = os.getenv("APPDATA") or os.path.expanduser("~")
                startup_folder = os.path.join(appdata, "Microsoft", "Windows",
                                              "Start Menu", "Programs",
                                              "Startup")

                # √âtape 1: V√©rifier l'acc√®s au serveur
                step_label.configure(text="V√©rification acc√®s r√©seau...")
                log_to_dialog(f"‚ñ∂ V√©rification acc√®s √† {veloce_base}...")

                try:
                    import subprocess
                    ping_result = subprocess.run(f"ping -n 1 -w 1000 {server}",
                                                 shell=True,
                                                 capture_output=True,
                                                 timeout=2)

                    if ping_result.returncode != 0:
                        log_to_dialog(f"‚ùå Serveur {server} non joignable")
                        step_label.configure(text="‚ùå Serveur non joignable")
                        progress_bar.set(1.0)
                        return

                    log_to_dialog(f"‚úì Serveur {server} joignable")

                    if not os.path.exists(station_path):
                        log_to_dialog(
                            f"‚ùå Dossier {station_folder} introuvable")
                        log_to_dialog(f"Chemin: {station_path}")
                        step_label.configure(
                            text="‚ùå Dossier station introuvable")
                        progress_bar.set(1.0)
                        return

                    log_to_dialog(
                        f"‚úì Dossier station accessible: {station_path}")
                    progress_bar.set(0.2)

                except Exception as e:
                    log_to_dialog(f"‚ùå Erreur r√©seau: {e}")
                    step_label.configure(text="‚ùå Erreur r√©seau")
                    progress_bar.set(1.0)
                    return

                # √âtape 2: Installer install (WSXX).exe en mode admin
                step_label.configure(text="Installation de l'application...")
                log_to_dialog(
                    f"‚ñ∂ Lancement de install (WS{station_formatted}).exe en mode admin..."
                )

                try:
                    if not os.path.exists(install_exe):
                        log_to_dialog(f"‚ùå Fichier introuvable: {install_exe}")
                        step_label.configure(
                            text="‚ùå Fichier install introuvable")
                        progress_bar.set(1.0)
                        return

                    import ctypes
                    # Lancer en mode admin avec le bon r√©pertoire de travail
                    ret = ctypes.windll.shell32.ShellExecuteW(
                        None, "runas", install_exe, None, station_path, 1)

                    if ret > 32:
                        log_to_dialog(
                            f"‚úì install (WS{station_formatted}).exe lanc√© avec succ√®s"
                        )
                    else:
                        log_to_dialog(f"‚ùå √âchec du lancement (code: {ret})")
                        step_label.configure(text="‚ùå Erreur installation")
                        progress_bar.set(1.0)
                        return

                    progress_bar.set(0.4)
                    time.sleep(1)

                except Exception as e:
                    log_to_dialog(f"‚ùå Erreur lors de l'installation: {e}")
                    step_label.configure(text="‚ùå Erreur installation")
                    progress_bar.set(1.0)
                    return

                # √âtape 3: Cr√©er raccourci sur le bureau
                step_label.configure(text="Cr√©ation du raccourci bureau...")
                log_to_dialog(
                    f"‚ñ∂ Cr√©ation du raccourci 'station {station_no_zero}' sur le bureau..."
                )

                try:
                    if not os.path.exists(ws_starter):
                        log_to_dialog(
                            f"‚ùå Fichier source introuvable: {ws_starter}")
                        step_label.configure(text="‚ùå WS Starter introuvable")
                        progress_bar.set(1.0)
                        return

                    # Utiliser PowerShell pour cr√©er le raccourci
                    shortcut_path = os.path.join(
                        desktop, f"station {station_no_zero}.lnk")
                    ps_script = f'''
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut("{shortcut_path}")
$Shortcut.TargetPath = "{ws_starter}"
$Shortcut.WorkingDirectory = "{station_path}"
$Shortcut.Save()
'''
                    ps_cmd = [
                        'powershell', '-ExecutionPolicy', 'Bypass', '-Command',
                        ps_script
                    ]
                    result = subprocess.run(ps_cmd,
                                            capture_output=True,
                                            text=True)

                    if result.returncode == 0 and os.path.exists(
                            shortcut_path):
                        log_to_dialog(f"‚úì Raccourci cr√©√©: {shortcut_path}")
                    else:
                        log_to_dialog(
                            f"‚ùå Erreur cr√©ation raccourci: {result.stderr}")
                        log_to_dialog("‚ö†Ô∏è Continuez manuellement...")

                    progress_bar.set(0.6)

                except Exception as e:
                    log_to_dialog(f"‚ùå Erreur cr√©ation raccourci: {e}")
                    log_to_dialog("‚ö†Ô∏è Continuez manuellement...")

                # √âtape 4: Appliquer cl√© de registre
                step_label.configure(
                    text="Application de la cl√© de registre...")
                log_to_dialog(
                    "‚ñ∂ Application de la cl√© de registre DirectoryCacheLifetime..."
                )

                try:
                    reg_cmd = r'C:\Windows\System32\reg.exe add HKLM\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters /v DirectoryCacheLifetime /t REG_DWORD /d 0 /f'
                    result = subprocess.run(reg_cmd,
                                            shell=True,
                                            capture_output=True,
                                            text=True)

                    if result.returncode == 0:
                        log_to_dialog(
                            "‚úì Cl√© de registre appliqu√©e avec succ√®s")
                    else:
                        log_to_dialog(f"‚ùå Erreur registre: {result.stderr}")

                    progress_bar.set(0.8)

                except Exception as e:
                    log_to_dialog(f"‚ùå Erreur cl√© registre: {e}")

                # √âtape 5: Copier raccourci dans le d√©marrage
                step_label.configure(
                    text="Configuration du d√©marrage automatique...")
                log_to_dialog(
                    "‚ñ∂ Copie du raccourci dans le dossier de d√©marrage...")

                try:
                    shortcut_source = os.path.join(
                        desktop, f"station {station_no_zero}.lnk")
                    shortcut_dest = os.path.join(
                        startup_folder, f"station {station_no_zero}.lnk")

                    if os.path.exists(shortcut_source):
                        import shutil
                        shutil.copy2(shortcut_source, shortcut_dest)
                        log_to_dialog(f"‚úì Raccourci copi√© dans D√©marrage")
                    else:
                        log_to_dialog(
                            "‚ö†Ô∏è Raccourci source introuvable pour copie")

                    # Supprimer l'ancien raccourci Veloce WS Starter.exe
                    old_shortcut = os.path.join(startup_folder,
                                                "Veloce WS Starter.exe")
                    if os.path.exists(old_shortcut):
                        os.remove(old_shortcut)
                        log_to_dialog(
                            "‚úì Ancien raccourci 'Veloce WS Starter.exe' supprim√©"
                        )

                    progress_bar.set(1.0)
                    step_label.configure(text="‚úÖ Configuration termin√©e!")
                    log_to_dialog("=" * 50)
                    log_to_dialog("‚úÖ STATION VELOCE CONFIGUR√âE AVEC SUCC√àS!")

                except Exception as e:
                    log_to_dialog(f"‚ö†Ô∏è Erreur d√©marrage automatique: {e}")
                    log_to_dialog(
                        "Configuration principale termin√©e, v√©rifiez manuellement le d√©marrage"
                    )
                    progress_bar.set(1.0)
                    step_label.configure(
                        text="‚úÖ Configuration termin√©e (avec avertissements)")

            log_to_dialog("=" * 50)

        # Bouton d√©marrer
        def start_setup():
            """D√©marre le setup apr√®s avoir demand√© les param√®tres si n√©cessaire"""
            server = None
            station_num = None
            if setup_type == "veloce":
                # Demander le serveur r√©seau AVANT de lancer le thread
                from tkinter import simpledialog
                server = simpledialog.askstring(
                    "Serveur r√©seau",
                    "Nom du serveur r√©seau (ex: SV):",
                    initialvalue="SV",
                    parent=dialog)

                if not server:
                    log_to_dialog("‚ùå Configuration annul√©e")
                    progress_bar.set(1.0)
                    return

                # Demander le num√©ro de station
                station_str = simpledialog.askstring(
                    "Num√©ro de station",
                    "Num√©ro de la station (ex: 1, 2, 3...):",
                    parent=dialog)

                if not station_str:
                    log_to_dialog("‚ùå Configuration annul√©e")
                    progress_bar.set(1.0)
                    return

                try:
                    station_num = int(station_str)
                    if station_num < 1:
                        raise ValueError("Num√©ro invalide")
                except:
                    log_to_dialog("‚ùå Num√©ro de station invalide")
                    progress_bar.set(1.0)
                    return

            # Lancer le worker avec les param√®tres
            threading.Thread(target=lambda: run_worker(server, station_num),
                             daemon=True).start()

        ctk.CTkButton(main_frame,
                      text="üöÄ D√©marrer",
                      command=start_setup,
                      fg_color="#16a34a",
                      hover_color="#15803d").pack(pady=10)

        # Bouton fermer
        ctk.CTkButton(main_frame,
                      text="Fermer",
                      command=dialog.destroy,
                      fg_color="#dc2626",
                      hover_color="#b91c1c").pack(pady=5)

    def build_custom_commands_options(self, parent):
        """Page Commandes personnalis√©es avec support PsExec"""
        f = ctk.CTkScrollableFrame(parent)
        f.pack(fill="both", expand=True, padx=6, pady=6)

        ctk.CTkLabel(f,
                     text="Commandes personnalis√©es (Local ou Distant)",
                     font=ctk.CTkFont(size=16,
                                      weight="bold")).pack(anchor="w",
                                                           pady=(0, 10))

        # Variables pour les champs
        if not hasattr(self, 'psexec_host_var'):
            self.psexec_host_var = tk.StringVar(value="")
            self.psexec_user_var = tk.StringVar(value="")
            self.psexec_pass_var = tk.StringVar(value="")
            self.psexec_cmd_var = tk.StringVar(value="")

        # Champs de saisie
        fields_frame = ctk.CTkFrame(f)
        fields_frame.pack(fill="x", pady=8)

        # H√¥te cible (optionnel)
        ctk.CTkLabel(fields_frame,
                     text="H√¥te distant (optionnel):").grid(row=0,
                                                            column=0,
                                                            sticky="w",
                                                            padx=10,
                                                            pady=5)
        host_entry = ctk.CTkEntry(fields_frame,
                                  textvariable=self.psexec_host_var,
                                  width=300,
                                  placeholder_text="Vide = local")
        host_entry.grid(row=0, column=1, padx=10, pady=5)

        # Utilisateur (optionnel)
        ctk.CTkLabel(fields_frame,
                     text="Utilisateur distant:").grid(row=1,
                                                       column=0,
                                                       sticky="w",
                                                       padx=10,
                                                       pady=5)
        ctk.CTkEntry(fields_frame,
                     textvariable=self.psexec_user_var,
                     width=300,
                     placeholder_text="Optionnel").grid(row=1,
                                                        column=1,
                                                        padx=10,
                                                        pady=5)

        # Mot de passe (optionnel)
        ctk.CTkLabel(fields_frame,
                     text="Mot de passe distant:").grid(row=2,
                                                        column=0,
                                                        sticky="w",
                                                        padx=10,
                                                        pady=5)
        ctk.CTkEntry(fields_frame,
                     textvariable=self.psexec_pass_var,
                     width=300,
                     show="*",
                     placeholder_text="Optionnel").grid(row=2,
                                                        column=1,
                                                        padx=10,
                                                        pady=5)

        # Commande
        ctk.CTkLabel(fields_frame,
                     text="Commande √† ex√©cuter:").grid(row=3,
                                                       column=0,
                                                       sticky="w",
                                                       padx=10,
                                                       pady=5)
        ctk.CTkEntry(fields_frame, textvariable=self.psexec_cmd_var,
                     width=400).grid(row=3, column=1, padx=10, pady=5)

        # Bouton ex√©cuter
        ctk.CTkButton(f,
                      text="üöÄ Ex√©cuter la commande",
                      width=200,
                      command=self._run_custom_command,
                      fg_color="#2b6ee6",
                      hover_color="#2058c9").pack(pady=10)

        # Commandes rapides
        quick_frame = ctk.CTkFrame(f)
        quick_frame.pack(fill="x", pady=(10, 0))

        ctk.CTkLabel(quick_frame,
                     text="‚ö° Commandes rapides:",
                     font=ctk.CTkFont(size=13,
                                      weight="bold")).pack(anchor="w",
                                                           padx=10,
                                                           pady=(10, 5))

        quick_commands = [
            ("Informations syst√®me", "systeminfo"),
            ("Liste processus", "tasklist"),
            ("Red√©marrer", "shutdown /r /t 0"),
            ("Ouvrir CMD", "cmd.exe"),
        ]

        btn_grid = ctk.CTkFrame(quick_frame, fg_color="transparent")
        btn_grid.pack(fill="x", padx=10, pady=5)

        for idx, (name, cmd) in enumerate(quick_commands):
            row = idx // 2
            col = idx % 2
            ctk.CTkButton(
                btn_grid,
                text=name,
                width=180,
                command=lambda c=cmd: self.psexec_cmd_var.set(c)).grid(
                    row=row, column=col, padx=5, pady=5)

        # Note importante
        note_frame = ctk.CTkFrame(f, fg_color="#3a3a3a")
        note_frame.pack(fill="x", pady=(10, 0), padx=10)

        note_text = """
‚ÑπÔ∏è MODE D'EMPLOI:
‚Ä¢ Local: Laisser "H√¥te distant" vide ‚Üí ex√©cution locale
‚Ä¢ Distant: Renseigner IP/nom + credentials ‚Üí ex√©cution via PsExec
  (PsExec doit √™tre dans config/psexec.exe)
  T√©l√©charger: https://learn.microsoft.com/sysinternals/downloads/psexec
"""
        ctk.CTkLabel(note_frame,
                     text=note_text,
                     justify="left",
                     text_color="#a5d6ff",
                     font=ctk.CTkFont(size=11)).pack(padx=15, pady=10)

    def _run_custom_command(self):
        """Ex√©cute une commande (locale ou distante via PsExec)"""
        host = self.psexec_host_var.get().strip()
        user = self.psexec_user_var.get().strip()
        password = self.psexec_pass_var.get().strip()
        command = self.psexec_cmd_var.get().strip()

        if not command:
            self.log("‚ùå Commande requise")
            return

        def worker():
            try:
                # Mode LOCAL (host vide)
                if not host:
                    self.log(f"‚ñ∂ Ex√©cution LOCALE: {command}")
                    result = subprocess.run(command,
                                            shell=True,
                                            capture_output=True,
                                            text=True,
                                            timeout=60)

                    if result.stdout:
                        self.log("----- SORTIE -----")
                        for line in result.stdout.splitlines():
                            self.log(line)

                    if result.stderr:
                        self.log("----- ERREURS -----")
                        for line in result.stderr.splitlines():
                            self.log(line)

                    self.log(
                        f"‚úÖ Commande locale termin√©e (code: {result.returncode})"
                    )
                    return

                # Mode DISTANT (avec PsExec)
                base_path = get_base_path()
                psexec_path = os.path.join(base_path, "config", "psexec.exe")

                if not os.path.exists(psexec_path):
                    self.log(f"‚ùå PsExec introuvable: {psexec_path}")
                    self.log(
                        "üì• T√©l√©chargez PsExec et placez-le dans config/psexec.exe"
                    )
                    return

                # Construction de la commande PsExec
                cmd_parts = [psexec_path, f"\\\\{host}"]
                if user:
                    cmd_parts.extend(["-u", user])
                if password:
                    cmd_parts.extend(["-p", password])

                cmd_parts.extend(["-accepteula", command])

                self.log(f"‚ñ∂ Ex√©cution DISTANTE sur {host}: {command}")

                result = subprocess.run(cmd_parts,
                                        capture_output=True,
                                        text=True,
                                        timeout=60)

                if result.stdout:
                    self.log("----- SORTIE -----")
                    for line in result.stdout.splitlines():
                        self.log(line)

                if result.stderr:
                    self.log("----- ERREURS -----")
                    for line in result.stderr.splitlines():
                        self.log(line)

                self.log(
                    f"‚úÖ Commande distante termin√©e (code: {result.returncode})"
                )

            except subprocess.TimeoutExpired:
                self.log("‚ùå Timeout: La commande a pris trop de temps")
            except Exception as e:
                self.log(f"‚ùå Erreur: {e}")

        threading.Thread(target=worker, daemon=True).start()

    def build_ip_config_options(self, parent):
        """Page configuration IP r√©seau compl√®te - Style Windows"""
        f = ctk.CTkScrollableFrame(parent)
        f.pack(fill="both", expand=True, padx=10, pady=10)

        # Titre
        ctk.CTkLabel(f,
                     text="Propri√©t√©s de : Protocole Internet version 4 (TCP/IPv4)",
                     font=ctk.CTkFont(size=15,
                                      weight="bold")).pack(anchor="w",
                                                           pady=(0, 15))

        # Variables
        if not hasattr(self, '_net_iface_var'):
            self._net_iface_var = tk.StringVar(value="")
            self._net_ip_var = tk.StringVar(value="")
            self._net_mask_var = tk.StringVar(value="")
            self._net_gw_var = tk.StringVar(value="")
            self._net_dns1_var = tk.StringVar(value="")
            self._net_dns2_var = tk.StringVar(value="")
            self._net_ip_mode_var = tk.StringVar(value="dhcp")  # dhcp ou static
            self._net_dns_mode_var = tk.StringVar(value="dhcp")  # dhcp ou static
            self._net_ifaces_info = {}

        # ========== S√©lection Interface ==========
        iface_frame = ctk.CTkFrame(f, fg_color="#2b2b2b")
        iface_frame.pack(fill="x", pady=(0, 15))

        ctk.CTkLabel(iface_frame, text="üåê Carte r√©seau :", 
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=15, pady=(10, 5))

        inner_frame = ctk.CTkFrame(iface_frame, fg_color="transparent")
        inner_frame.pack(fill="x", padx=15, pady=(0, 10))

        self._iface_menu = ctk.CTkOptionMenu(inner_frame,
                                             variable=self._net_iface_var,
                                             values=[],
                                             width=450)
        self._iface_menu.pack(side="left", padx=(0, 8))

        ctk.CTkButton(
            inner_frame,
            text="üîÑ Recharger",
            width=100,
            command=lambda: threading.Thread(target=self._detect_interfaces,
                                             daemon=True).start()).pack(side="left", padx=(0, 8))

        # Bouton pour ouvrir directement les propri√©t√©s IPv4 Windows
        ctk.CTkButton(
            inner_frame,
            text="üîß Ouvrir propri√©t√©s IPv4 Windows",
            width=220,
            fg_color="#10b981",
            hover_color="#059669",
            command=self._open_ipv4_properties).pack(side="left")

        # ========== CONFIGURATION IP ==========
        ip_section = ctk.CTkFrame(f, fg_color="#2b2b2b")
        ip_section.pack(fill="x", pady=(0, 12))

        ctk.CTkLabel(ip_section, 
                     text="Les param√®tres IP peuvent √™tre d√©termin√©s automatiquement si votre r√©seau le permet.",
                     text_color="#9ca3af",
                     font=ctk.CTkFont(size=11)).pack(anchor="w", padx=15, pady=(12, 8))

        # Radio DHCP IP
        ctk.CTkRadioButton(ip_section,
                           text="‚óã Obtenir automatiquement une adresse IP",
                           variable=self._net_ip_mode_var,
                           value="dhcp",
                           font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=4)

        # Radio IP Manuelle
        ctk.CTkRadioButton(ip_section,
                           text="‚óè Utiliser l'adresse IP suivante :",
                           variable=self._net_ip_mode_var,
                           value="static",
                           font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(8, 8))

        # Champs IP
        fields_frame = ctk.CTkFrame(ip_section, fg_color="transparent")
        fields_frame.pack(fill="x", padx=40, pady=(0, 12))

        def create_ip_field(parent, label_text, var):
            row = ctk.CTkFrame(parent, fg_color="transparent")
            row.pack(fill="x", pady=4)
            ctk.CTkLabel(row, text=label_text, width=180,
                         anchor="w").pack(side="left")
            entry = ctk.CTkEntry(row, textvariable=var, width=250)
            entry.pack(side="left", padx=5)
            return entry

        self._net_ip_entry = create_ip_field(fields_frame, "Adresse IP :", self._net_ip_var)
        self._net_mask_entry = create_ip_field(fields_frame, "Masque de sous-r√©seau :", self._net_mask_var)
        self._net_gw_entry = create_ip_field(fields_frame, "Passerelle par d√©faut :", self._net_gw_var)

        # ========== CONFIGURATION DNS ==========
        dns_section = ctk.CTkFrame(f, fg_color="#2b2b2b")
        dns_section.pack(fill="x", pady=(0, 15))

        # Radio DHCP DNS
        ctk.CTkRadioButton(dns_section,
                           text="‚óã Obtenir automatiquement les adresses des serveurs DNS",
                           variable=self._net_dns_mode_var,
                           value="dhcp",
                           font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(12, 4))

        # Radio DNS Manuel
        ctk.CTkRadioButton(dns_section,
                           text="‚óè Utiliser l'adresse de serveur DNS suivante :",
                           variable=self._net_dns_mode_var,
                           value="static",
                           font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(8, 8))

        # Champs DNS
        dns_fields_frame = ctk.CTkFrame(dns_section, fg_color="transparent")
        dns_fields_frame.pack(fill="x", padx=40, pady=(0, 12))

        self._net_dns1_entry = create_ip_field(dns_fields_frame, "Serveur DNS pr√©f√©r√© :", self._net_dns1_var)
        self._net_dns2_entry = create_ip_field(dns_fields_frame, "Serveur DNS auxiliaire :", self._net_dns2_var)

        # ========== BOUTON APPLIQUER ==========
        ctk.CTkButton(
            f,
            text="‚úÖ OK - Appliquer la configuration",
            width=280,
            height=40,
            fg_color="#2b6ee6",
            hover_color="#2058c9",
            font=ctk.CTkFont(size=13, weight="bold"),
            command=lambda: threading.Thread(target=self._apply_network_config,
                                             daemon=True).start()).pack(pady=(5, 10))

        # Activer/D√©sactiver champs selon mode
        def toggle_ip_fields(*args):
            state = "normal" if self._net_ip_mode_var.get() == "static" else "disabled"
            for entry in [self._net_ip_entry, self._net_mask_entry, self._net_gw_entry]:
                entry.configure(state=state)

        def toggle_dns_fields(*args):
            state = "normal" if self._net_dns_mode_var.get() == "static" else "disabled"
            for entry in [self._net_dns1_entry, self._net_dns2_entry]:
                entry.configure(state=state)

        self._net_ip_mode_var.trace_add("write", toggle_ip_fields)
        self._net_dns_mode_var.trace_add("write", toggle_dns_fields)
        toggle_ip_fields()
        toggle_dns_fields()

        # Remplir les champs quand on change d'interface
        def on_iface_change(iface_name):
            info = self._net_ifaces_info.get(iface_name, {})

            # D'abord mettre en mode static pour activer les champs et afficher les valeurs actuelles
            self._net_ip_mode_var.set("static")
            self._net_dns_mode_var.set("static")

            # Remplir tous les champs avec les valeurs actuelles (m√™me si DHCP)
            self._net_ip_var.set(info.get("ip", ""))
            self._net_mask_var.set(info.get("mask", ""))
            self._net_gw_var.set(info.get("gw", ""))
            self._net_dns1_var.set(info.get("dns1", ""))
            self._net_dns2_var.set(info.get("dns2", ""))

            # Ensuite d√©terminer le vrai mode selon la configuration
            ip_is_dhcp = info.get("dhcp", True)
            # Ne mettre en DHCP que si c'est vraiment configur√© en DHCP
            # Sinon laisser en static pour que l'utilisateur voie les valeurs actuelles
            if ip_is_dhcp:
                self._net_ip_mode_var.set("dhcp")

            # DNS auto si vide ET IP est en DHCP
            dns_is_auto = (not info.get("dns1", "") and not info.get("dns2", "")) and ip_is_dhcp
            if dns_is_auto:
                self._net_dns_mode_var.set("dhcp")

            # Logger les infos pour debug
            self.log(f"üìä Carte: {iface_name}")
            self.log(f"   IP: {info.get('ip', 'N/A')} - Mode: {'DHCP' if ip_is_dhcp else 'Static'}")
            self.log(f"   Masque: {info.get('mask', 'N/A')}")
            self.log(f"   Passerelle: {info.get('gw', 'Aucune')}")
            self.log(f"   DNS: {info.get('dns1', 'N/A')} / {info.get('dns2', 'N/A')}")
            self.log("")

        self._iface_menu.configure(command=lambda v: on_iface_change(v))

        # Lancer la d√©tection au d√©marrage
        threading.Thread(target=self._detect_interfaces, daemon=True).start()

    def _detect_interfaces(self):
        """D√©tecte les interfaces r√©seau et r√©cup√®re leurs configs"""
        try:
            self.log("‚ñ∂ D√©tection des interfaces r√©seau...")

            # Liste des interfaces via psutil
            interfaces = list(psutil.net_if_addrs().keys())
            infos = {}

            for iface in interfaces:
                try:
                    # R√©cup√®re les infos via netsh
                    result = subprocess.check_output(
                        f'netsh interface ip show config name="{iface}"',
                        shell=True,
                        text=True,
                        encoding="utf-8",
                        errors="ignore")

                    # Parse la sortie
                    info = self._parse_netsh_output(result)
                    dns_list = info.get("dns", [])

                    infos[iface] = {
                        "ip": info.get("ip", ""),
                        "mask": info.get("mask", ""),
                        "gw": info.get("gateway", ""),
                        "dns1": dns_list[0] if len(dns_list) > 0 else "",
                        "dns2": dns_list[1] if len(dns_list) > 1 else "",
                        "dhcp": info.get("dhcp", True)
                    }
                except:
                    infos[iface] = {
                        "ip": "",
                        "mask": "",
                        "gw": "",
                        "dns1": "",
                        "dns2": "",
                        "dhcp": True
                    }

            # Mettre √† jour l'UI
            def update_ui():
                self._net_ifaces_info = infos
                names = list(infos.keys())

                if names:
                    self._iface_menu.configure(values=names)
                    current = self._net_iface_var.get()
                    selected = current if current in names else names[0]
                    self._net_iface_var.set(selected)

                    # Remplir les champs
                    info = infos[selected]
                    self._net_ip_var.set(info["ip"])
                    self._net_mask_var.set(info["mask"])
                    self._net_gw_var.set(info["gw"])
                    self._net_dns1_var.set(info["dns1"])
                    self._net_dns2_var.set(info["dns2"])
                    self._net_mode_var.set(
                        "dhcp" if info["dhcp"] else "static")
                else:
                    self._iface_menu.configure(values=["Aucune interface"])
                    self._net_iface_var.set("")

                self.log(f"‚úÖ {len(names)} interface(s) d√©tect√©e(s)")

            self.after(0, update_ui)

        except Exception as e:
            self.log(f"‚ùå Erreur d√©tection interfaces: {e}")

    def _parse_netsh_output(self, output):
        """Parse la sortie de netsh pour extraire les infos r√©seau"""
        info = {"ip": "", "mask": "", "gateway": "", "dns": [], "dhcp": True}

        # D√©tecter DHCP vs Static - regarder plusieurs patterns
        dhcp_match = re.search(
            r"DHCP\s+(?:activ√©|enabled)\s*:\s*(Oui|Yes|Non|No)", output,
            re.IGNORECASE | re.MULTILINE)
        if dhcp_match:
            dhcp_value = dhcp_match.group(1).lower()
            info["dhcp"] = dhcp_value in ["oui", "yes"]
        else:
            # Si pas de ligne DHCP trouv√©e, chercher "statically configured" ou "configured statically"
            if re.search(r"(?:statically|statique)", output, re.IGNORECASE):
                info["dhcp"] = False
            elif re.search(r"(?:dhcp|dynamique)", output, re.IGNORECASE):
                info["dhcp"] = True

        lines = output.splitlines()

        for i, line in enumerate(lines):
            line_lower = line.lower().strip()

            # IP Address - cherche plusieurs patterns
            if any(x in line_lower for x in ["adresse ip", "ip address"]):
                # Sur la m√™me ligne
                m = re.search(r":\s*([\d\.]+)", line)
                if m and m.group(1) != "0.0.0.0":
                    info["ip"] = m.group(1)
                # Ligne suivante
                elif i + 1 < len(lines):
                    m = re.search(r"([\d\.]+)", lines[i + 1])
                    if m and m.group(1) != "0.0.0.0":
                        info["ip"] = m.group(1)

            # Subnet Mask - cherche plusieurs patterns
            if any(x in line_lower for x in
                   ["masque de sous", "subnet mask", "subnet prefix"]):
                # Format direct 255.255.255.0
                m = re.search(r":\s*([\d\.]+)", line)
                if m:
                    info["mask"] = m.group(1)
                # Format CIDR /24
                elif "/" in line:
                    m = re.search(r"/(\d+)", line)
                    if m:
                        prefix = int(m.group(1))
                        mask_bits = '1' * prefix + '0' * (32 - prefix)
                        octets = [
                            str(int(mask_bits[i:i + 8], 2))
                            for i in range(0, 32, 8)
                        ]
                        info["mask"] = '.'.join(octets)
                # Ligne suivante
                elif i + 1 < len(lines):
                    m = re.search(r"([\d\.]+)", lines[i + 1])
                    if m:
                        info["mask"] = m.group(1)

            # Gateway - cherche plusieurs patterns
            if any(x in line_lower
                   for x in ["passerelle", "gateway", "default gateway"]):
                # Sur la m√™me ligne
                m = re.search(r":\s*([\d\.]+)", line)
                if m and m.group(1) not in ["0.0.0.0", ""]:
                    info["gateway"] = m.group(1)
                # Ligne suivante
                elif i + 1 < len(lines):
                    m = re.search(r"([\d\.]+)", lines[i + 1])
                    if m and m.group(1) not in ["0.0.0.0", ""]:
                        info["gateway"] = m.group(1)

            # DNS Servers
            if any(x in line_lower for x in ["serveur dns", "dns server"]):
                # Sur la m√™me ligne
                m = re.search(r":\s*([\d\.]+)", line)
                if m:
                    info["dns"].append(m.group(1))
                # Lignes suivantes (DNS multiples)
                j = i + 1
                while j < len(lines) and j < i + 5:
                    m = re.search(r"^\s*([\d\.]+)\s*$", lines[j].strip())
                    if m:
                        info["dns"].append(m.group(1))
                        j += 1
                    else:
                        break

        return info

    def _open_ipv4_properties(self):
        """Ouvre les propri√©t√©s IPv4 Windows de la carte r√©seau s√©lectionn√©e"""
        try:
            iface_name = self._net_iface_var.get()

            if not iface_name:
                self.log("‚ùå Aucune interface s√©lectionn√©e")
                self.log("   Veuillez d'abord s√©lectionner une carte r√©seau")
                return

            self.log(f"‚ñ∂ Ouverture des propri√©t√©s r√©seau pour: {iface_name}")
            self.log("")

            # Ouvrir le panneau de configuration r√©seau (Network Connections)
            subprocess.Popen('control ncpa.cpl', shell=True)

            self.log("‚úì Panneau Connexions r√©seau Windows ouvert")
            self.log("")
            self.log(f"üéØ CARTE S√âLECTIONN√âE: {iface_name}")
            self.log("")
            self.log("üìã Instructions rapides:")
            self.log(f"   1. Chercher la carte: {iface_name}")
            self.log("   2. Clic DROIT sur cette carte ‚Üí Propri√©t√©s")
            self.log("   3. Double-clic sur: 'Protocole Internet version 4 (TCP/IPv4)'")
            self.log("   4. Configurer l'adresse IP, masque, passerelle et DNS")
            self.log("   5. Cliquer 'OK' pour enregistrer")
            self.log("")

            # Afficher les infos actuelles de la carte pour r√©f√©rence
            info = self._net_ifaces_info.get(iface_name, {})
            if info and info.get("ip"):
                self.log("üìä Configuration actuelle de cette carte:")
                self.log(f"   IP: {info.get('ip', 'N/A')}")
                self.log(f"   Masque: {info.get('mask', 'N/A')}")
                self.log(f"   Passerelle: {info.get('gw', 'N/A')}")
                self.log(f"   DNS primaire: {info.get('dns1', 'N/A')}")
                self.log(f"   DNS secondaire: {info.get('dns2', 'N/A')}")
                self.log("")

        except Exception as e:
            self.log(f"‚ùå Erreur ouverture propri√©t√©s r√©seau: {e}")

    def _apply_network_config(self):
        """Applique la configuration r√©seau (IP et DNS s√©par√©s)"""
        iface = self._net_iface_var.get()
        if not iface:
            self.log("‚ùå Aucune interface s√©lectionn√©e")
            return

        if not is_admin():
            self.log("üîº Droits administrateur requis, relance...")
            try:
                relaunch_as_admin()
            except Exception as e:
                self.log(f"‚ùå Impossible de relancer en admin: {e}")
            return

        ip_mode = self._net_ip_mode_var.get()
        dns_mode = self._net_dns_mode_var.get()

        self.log(f"‚ñ∂ Application de la configuration sur '{iface}'")
        self.log(f"  Mode IP: {ip_mode}, Mode DNS: {dns_mode}")

        try:
            # ===== CONFIGURATION IP =====
            if ip_mode == "dhcp":
                subprocess.run(
                    f'netsh interface ip set address name="{iface}" source=dhcp',
                    shell=True,
                    check=True)
                self.log("‚úÖ Adresse IP configur√©e en DHCP (automatique)")
            else:
                # IP statique
                ip = self._net_ip_var.get().strip()
                mask = self._net_mask_var.get().strip()
                gw = self._net_gw_var.get().strip()

                if not ip or not mask:
                    self.log("‚ùå IP et masque requis pour IP statique")
                    return

                # netsh n√©cessite un argument gateway m√™me s'il est vide (utiliser "none")
                gateway_arg = gw if gw else "none"
                cmd = f'netsh interface ip set address name="{iface}" static {ip} {mask} {gateway_arg}'

                subprocess.run(cmd, shell=True, check=True)
                self.log(f"‚úÖ IP statique configur√©e: {ip}/{mask}")
                if gw:
                    self.log(f"‚úÖ Passerelle: {gw}")
                else:
                    self.log("‚úÖ Passerelle: aucune")

            # ===== CONFIGURATION DNS =====
            if dns_mode == "dhcp":
                subprocess.run(
                    f'netsh interface ip set dns name="{iface}" source=dhcp',
                    shell=True,
                    check=True)
                self.log("‚úÖ DNS configur√© en automatique")
            else:
                # DNS manuel
                dns1 = self._net_dns1_var.get().strip()
                dns2 = self._net_dns2_var.get().strip()

                if dns1:
                    subprocess.run(
                        f'netsh interface ip set dns name="{iface}" static {dns1}',
                        shell=True,
                        check=True)
                    self.log(f"‚úÖ DNS primaire: {dns1}")

                if dns2:
                    subprocess.run(
                        f'netsh interface ip add dns name="{iface}" {dns2}',
                        shell=True,
                        check=True)
                    self.log(f"‚úÖ DNS secondaire: {dns2}")

            time.sleep(1)
            self.log("üîÑ Actualisation des informations...")
            self._detect_interfaces()

        except Exception as e:
            self.log(f"‚ùå Erreur: {e}")

    # ==================== SYST√àME DE MISE √Ä JOUR ====================

    def _check_updates_auto(self):
        """V√©rification automatique des mises √† jour au d√©marrage (discr√®te)"""
        try:
            time.sleep(2)  # Attendre que l'interface soit charg√©e

            update_available, local_ver, remote_ver = check_for_updates()

            if remote_ver:
                # Mettre √† jour le label de version
                version_text = f"Version {remote_ver}"
                if update_available:
                    version_text += " üî¥ Mise √† jour disponible!"

                self.after(0, lambda: self.version_label.configure(
                    text=version_text,
                    text_color="#ef4444" if update_available else None))

                # Afficher notification dans la console
                if update_available:
                    self.after(0, lambda: self.log(
                        f"üîî Nouvelle version disponible: {remote_ver} (install√©e: {local_ver})"))
                    self.after(0, lambda: self.log(
                        "   Cliquez sur 'üîÑ V√©rifier mises √† jour' pour t√©l√©charger"))
        except Exception as e:
            print(f"Erreur v√©rification auto: {e}")

    def _check_updates_manual(self):
        """V√©rification manuelle des mises √† jour (avec popup)"""
        self.log("üîç V√©rification des mises √† jour...")

        def worker():
            try:
                update_available, local_ver, remote_ver = check_for_updates()

                if not remote_ver:
                    self.after(0, lambda: self.log(
                        "‚ùå Impossible de contacter le serveur de mises √† jour"))
                    self.after(0, lambda: messagebox.showerror(
                        "Erreur",
                        "Impossible de v√©rifier les mises √† jour.\n"
                        "V√©rifiez votre connexion Internet."))
                    return

                if update_available:
                    self.after(0, lambda: self.log(
                        f"‚úÖ Mise √† jour disponible: v{remote_ver} (actuelle: v{local_ver})"))
                    self.after(0, lambda: self._show_update_dialog(local_ver, remote_ver))
                else:
                    self.after(0, lambda: self.log(
                        f"‚úÖ Vous avez la derni√®re version: v{local_ver}"))
                    self.after(0, lambda: messagebox.showinfo(
                        "Aucune mise √† jour",
                        f"Vous utilisez d√©j√† la derni√®re version:\nVersion {local_ver}"))

            except Exception as e:
                self.after(0, lambda: self.log(f"‚ùå Erreur: {e}"))
                self.after(0, lambda: messagebox.showerror("Erreur", str(e)))

        threading.Thread(target=worker, daemon=True).start()

    def _show_update_dialog(self, current_version, new_version):
        """Affiche le dialogue de mise √† jour"""
        from tkinter import Toplevel

        dialog = Toplevel(self)
        dialog.title("Mise √† jour disponible")
        dialog.geometry("550x600")
        dialog.resizable(False, False)
        dialog.transient(self)
        dialog.grab_set()

        # Centrer la fen√™tre
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (550 // 2)
        y = (dialog.winfo_screenheight() // 2) - (350 // 2)
        dialog.geometry(f"+{x}+{y}")

        # Ic√¥ne
        try:
            base_path = get_base_path()
            icon_path = os.path.join(base_path, "mainicon.ico")
            if os.path.exists(icon_path):
                dialog.iconbitmap(icon_path)
        except:
            pass

        # Contenu
        main_frame = ctk.CTkFrame(dialog, fg_color="#1e1e1e")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Ic√¥ne de mise √† jour
        ctk.CTkLabel(main_frame,
                     text="üîÑ",
                     font=ctk.CTkFont(size=48)).pack(pady=(10, 5))

        # Titre
        ctk.CTkLabel(main_frame,
                     text="Mise √† jour disponible !",
                     font=ctk.CTkFont(size=18, weight="bold")).pack(pady=5)

        # Versions
        version_frame = ctk.CTkFrame(main_frame, fg_color="#2b2b2b")
        version_frame.pack(fill="x", padx=20, pady=15)

        ctk.CTkLabel(version_frame,
                     text=f"Version actuelle: {current_version}",
                     font=ctk.CTkFont(size=13),
                     text_color="#9ca3af").pack(pady=5)

        ctk.CTkLabel(version_frame,
                     text=f"Nouvelle version: {new_version}",
                     font=ctk.CTkFont(size=14, weight="bold"),
                     text_color="#10b981").pack(pady=5)

        # Message
        ctk.CTkLabel(main_frame,
                     text="Voulez-vous t√©l√©charger et installer\ncette mise √† jour maintenant ?",
                     font=ctk.CTkFont(size=12),
                     text_color="#d1d5db").pack(pady=10)

        # Boutons
        btn_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        btn_frame.pack(pady=10)

        ctk.CTkButton(btn_frame,
                      text="‚úÖ T√©l√©charger et installer",
                      width=200,
                      height=35,
                      command=lambda: [dialog.destroy(), 
                                      self._download_and_install_update()],
                      fg_color="#16a34a",
                      hover_color="#15803d",
                      font=ctk.CTkFont(size=13, weight="bold")).pack(side="left", padx=5)

        ctk.CTkButton(btn_frame,
                      text="‚ùå Plus tard",
                      width=120,
                      height=35,
                      command=dialog.destroy,
                      fg_color="#6b7280",
                      hover_color="#4b5563",
                      font=ctk.CTkFont(size=13)).pack(side="left", padx=5)

    def _download_and_install_update(self):
        """T√©l√©charge et installe la mise √† jour"""
        self.log("=" * 60)
        self.log("üîÑ T√âL√âCHARGEMENT DE LA MISE √Ä JOUR")
        self.log("=" * 60)
        self.log("‚ñ∂ T√©l√©chargement en cours depuis kpi-tech.ca...")

        # Cr√©er une popup de progression
        progress_dialog = tk.Toplevel(self)
        progress_dialog.title("T√©l√©chargement en cours...")
        progress_dialog.geometry("450x200")
        progress_dialog.resizable(False, False)
        progress_dialog.transient(self)
        progress_dialog.grab_set()

        # Centrer
        progress_dialog.update_idletasks()
        x = (progress_dialog.winfo_screenwidth() // 2) - (450 // 2)
        y = (progress_dialog.winfo_screenheight() // 2) - (200 // 2)
        progress_dialog.geometry(f"+{x}+{y}")

        # Ic√¥ne
        try:
            base_path = get_base_path()
            icon_path = os.path.join(base_path, "mainicon.ico")
            if os.path.exists(icon_path):
                progress_dialog.iconbitmap(icon_path)
        except:
            pass

        frame = ctk.CTkFrame(progress_dialog, fg_color="#1e1e1e")
        frame.pack(fill="both", expand=True, padx=20, pady=20)

        status_label = ctk.CTkLabel(frame,
                                    text="T√©l√©chargement en cours...",
                                    font=ctk.CTkFont(size=14, weight="bold"))
        status_label.pack(pady=10)

        progress_bar = ctk.CTkProgressBar(frame, width=380)
        progress_bar.pack(pady=10)
        progress_bar.set(0)

        size_label = ctk.CTkLabel(frame,
                                  text="0 MB / 0 MB",
                                  font=ctk.CTkFont(size=11),
                                  text_color="#9ca3af")
        size_label.pack(pady=5)

        def update_progress(downloaded, total):
            """Mise √† jour de la barre de progression"""
            if total > 0:
                percent = min(downloaded / total, 1.0)
                progress_bar.set(percent)

                dl_mb = downloaded / (1024 * 1024)
                total_mb = total / (1024 * 1024)
                size_label.configure(text=f"{dl_mb:.1f} MB / {total_mb:.1f} MB")
                self.log(f"  T√©l√©charg√©: {dl_mb:.1f} MB / {total_mb:.1f} MB ({percent*100:.0f}%)")

        def worker():
            try:
                # T√©l√©chargement
                update_file = download_update(update_progress)

                if not update_file:
                    self.after(0, lambda: progress_dialog.destroy())
                    self.after(0, lambda: self.log("‚ùå √âchec du t√©l√©chargement"))
                    self.after(0, lambda: messagebox.showerror(
                        "Erreur",
                        "Le t√©l√©chargement a √©chou√©.\nVeuillez r√©essayer."))
                    return

                self.after(0, lambda: status_label.configure(
                    text="‚úÖ T√©l√©chargement termin√© !"))
                self.after(0, lambda: self.log("‚úÖ T√©l√©chargement termin√©"))

                time.sleep(1)

                # Installation
                self.after(0, lambda: status_label.configure(
                    text="Installation en cours..."))
                self.after(0, lambda: self.log("‚ñ∂ Lancement de l'installation..."))

                time.sleep(1)

                if install_update(update_file):
                    self.after(0, lambda: self.log("‚úÖ Mise √† jour lanc√©e"))
                    self.after(0, lambda: self.log("‚ö†Ô∏è  L'application va red√©marrer..."))
                    self.after(0, lambda: progress_dialog.destroy())

                    # Fermer IMM√âDIATEMENT l'application
                    import sys
                    time.sleep(0.5)
                    sys.exit(0)
                else:
                    self.after(0, lambda: progress_dialog.destroy())
                    self.after(0, lambda: self.log("‚ùå √âchec de l'installation"))
                    self.after(0, lambda: messagebox.showerror(
                        "Erreur",
                        "L'installation a √©chou√©.\nVeuillez installer manuellement."))

            except Exception as e:
                self.after(0, lambda: progress_dialog.destroy())
                self.after(0, lambda: self.log(f"‚ùå Erreur: {e}"))
                self.after(0, lambda: messagebox.showerror("Erreur", str(e)))

        threading.Thread(target=worker, daemon=True).start()
